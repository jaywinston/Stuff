// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array buf;
    field int length, _maxLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength < 0) {
            do Sys.error(14);
        }
        if (maxLength > 0) {
            let buf = Array.new(maxLength);
        } else {
            let buf = 0;
        }
        let length = 0;
        let _maxLength = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (j < length) {
            return buf[j];
        } else {
            do Sys.error(15);
        }
        return 0;
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j < length) {
            let buf[j] = c;
        } else {
            do Sys.error(16);
        }
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < _maxLength) {
            let buf[length] = c;
            let length = length + 1;
        } else {
            do Sys.error(17);
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length = 0) {
            do Sys.error(18);
        }
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, n;
        var boolean neg;

        let neg = buf[0] = 45;
        if (neg) {
            let i = 1;
        } else {
            let i = 0;
        }
        let n = 0;
        while ( (i<length) & ((buf[i]>47) & (buf[i]<58)) ) {
            let n = (n*10) + (buf[i]-48);
            let i = i + 1;
        }

        if (neg) {
            return -n;
        } else {
            return n;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int i, l, q, t;
        var boolean neg;

        let neg = val < 0;
        if (neg) {
            let val = -val;
            let buf[0] = 45;
            let l = 1;
            let i = 1;
        } else {
            let l = 0;
            let i = 0;
        }

        while (val > 0) {
            if (l = _maxLength) {
                do Sys.error(19);
            }
            let q = val / 10;
            let buf[l] = (val-(q*10)) + 48;
            let l = l + 1;
            let val = q;
        }
        let length = l;

        let l = l - 1;
        while (i < l) {
            let t = buf[i];
            let buf [i] = buf[l];
            let buf[l] = t;
            let i = i + 1;
            let l = l - 1;
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
