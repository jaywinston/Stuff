class Symbol {

    field int _type, _value;
    field String _name;
    field Symbol _next;
    field Symbol end;

    constructor Symbol new(String name, int type, int value) {
        let _name = Str.dup(name);
        let _type = type;
        let _value = value;
        let _next = null;
        let end = this;
        return this;
    }

    method void dispose() {
        if (~(_name = null)) {
            do _name.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    method int name() {
        return _name;
    }

    method int type() {
        return _type;
    }

    method int value() {
        return _value;
    }

    method int next() {
        return _next;
    }

    method void setType(int type) {
        let _type = type;
        return;
    }

    method void setValue(int value) {
        let _value = value;
        return;
    }

    method void setNext(int next) {
        let _next = next;
        return;
    }

    method void append(Symbol o) {
        if (~(o = null)) {
            do o.setNext(end.next());
            do end.setNext(o);
            let end = o;
        }
        return;
    }

    function Symbol dup(Symbol o) {
        if (o = null) {
            return null;
        }
        return Symbol.new(o.name(), o.type(), o.value());
    }

}
