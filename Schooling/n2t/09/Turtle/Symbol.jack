/* Depends on Str.jack */

class Symbol {

    field int _type, _value;
    field String _name;
    field Symbol _next;

    constructor Symbol new(String name, int type, int value) {
        if (name = null) {
            let _name = null;
        } else {
            let _name = Str.dup(name);
        }
        let _type = type;
        let _value = value;
        let _next = null;
        return this;
    }

    method void dispose() {
        var String s;

        if (~(_name = null)) {
            do _name.dispose();
        }

        if (       (_type=Symbol.STR())
                | ((_type=Symbol.END())
                |  (_type=Symbol.EXPR())) ) {
            let s = _value;
            do s.dispose();
        } else { if (   (_type=Symbol.BLOCK())
                     | ((_type=Symbol.CMDLIN())
                     |  (_type=Symbol.FUNC())) ) {
            do Symbol.clear(_value);
        }}

        do Memory.deAlloc(this);

        return;
    }

    method int name() {
        return _name;
    }

    method int type() {
        return _type;
    }

    method int value() {
        return _value;
    }

    method int next() {
        return _next;
    }

    method void setName(int name) {
        let _name = name;
        return;
    }

    method void setType(int type) {
        let _type = type;
        return;
    }

    method void setValue(int value) {
        let _value = value;
        return;
    }

    method void setNext(int next) {
        let _next = next;
        return;
    }

    method void append(Symbol o) {
        var Symbol p;

        let p = this;
        while (~(p.next() = null)) {
            let p = p.next();
        }

        do p.setNext(o);

        return;
    }

    function void clear(Symbol sym) {
        var Symbol next;

        while (~(sym = null)) {
            let next = sym.next();
            do sym.dispose();
            let sym = next;
        }

        return;
    }

    function Symbol copy1(Symbol sym) {
        var int type;

        if (sym = null) {
            return null;
        }

        let type = sym.type();

        if (type = Symbol.STR()) {
            return Symbol.new(sym.name(), sym.type(), Str.dup(sym.value()));
        }

        if (       (type=Symbol.BLOCK())
                | ((type=Symbol.CMDLIN()) 
                |  (type=Symbol.FUNC())) ) {
            return Symbol.new(sym.name(), sym.type(),
                              Symbol.copy(sym.value()));
        }

        return Symbol.new(sym.name(), sym.type(), sym.value());
    }


    function Symbol copy(Symbol sym) {
        var Symbol new;

        if (sym = null) {
            return null;
        }

        let new = Symbol.copy1(sym);

        let sym = sym.next();
        while (~(sym = null)) {
            do new.append(Symbol.copy1(sym));
            let sym = sym.next();
        }

        return new;
    }


    function int BLOCK     () { return  1; }
    function int CMD       () { return  2; }
    function int CMDLIN    () { return  3; }
    function int FUNC      () { return  4; }
    function int END       () { return  5; }
    function int EXPR      () { return  6; }
    function int INT       () { return  7; }
    function int STR       () { return  8; }
    function int SYM       () { return  9; }
    function int SYMTAB    () { return  9; }

}
