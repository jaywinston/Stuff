class Str {

    static int _maxlen;
    static String _nulls;

    function void init() {
        let _maxlen = 128;
        let _nulls = "";
        return;
    }

    function int MAXLEN() {
        return _maxlen;
    }

    function String NULLS() {
        return _nulls;
    }

    function boolean isInt(String s) {
        var char c;
        var int i, len;

        let i = 0;
        let len = s.length();
        while (i < len) {
            let c = s.charAt(i);
            if (~( (c>47) & (c<58) )) {
                return false;
            }
            let i = i + 1;
        }

        return true;
    }

    /* todo: 2nd arg array */
    function String format(String f, Array arg) {
        var boolean continue;
        var char c;
        var int a, i, j, fLen, tLen;
        var String s, t;

        let fLen = f.length();

        if (fLen < 2) {
            return Str.dup(f);
        }

        let s = String.new(_maxlen);
        let t = null;

        let a = 0;
        let i = 0;
        while (i < fLen) {
            let c = f.charAt(i);
            let continue = ~(c = 37);
            let i = i + 1;
            while ( (i<fLen) & continue ) {
                do s.appendChar(c);
                let c = f.charAt(i);
                let continue = ~(c = 37);
                let i = i + 1;
            }
            if (i < fLen) {
                let c = f.charAt(i);
                if (c = 100) {
                    let t = String.new(6);
                    let tLen = t.length();
                    do t.setInt(arg[a]);
                } else { if (c = 115) {
                    let t = arg[a];
                    let tLen = t.length();
                } else { if (c = 37) {
                    if (i < _maxlen) {
                        do s.appendChar(c);
                    }
                } else { if (c = 110) {
                    if (i < _maxlen) {
                        do s.appendChar(128);
                    }
                }}}}
                if (~(t = null)) {
/*
                    let j = 0;
                    while (j < tLen) {
                        do s.appendChar(t.charAt(j));
                        let j = j + 1;
                    }
*/
                    do Str.cat(s, t);
                    do t.dispose();
                    let t = null;
                    let a = a + 1;
                }
            } else {
                do s.appendChar(c);
            }
            let i = i + 1;
        }

        return s;
    }

    function int cat(String s, String t) {
        var int i;

        let i = 0;
        while (i < t.length()) {
            do s.appendChar(t.charAt(i));
            let i = i + 1;
        }

        return i + s.length();
    }

    function void truncate(String s) {
        var int len;

        let len = s.length();
        while (len > 0) {
            do s.eraseLastChar();
            let len = len - 1;
        }

        return;
    }

    function void cpy(String s, String t) {
        var int i, sLen;

        let sLen = s.length();
        if (sLen > t.length()) {
            /* todo: abort */
            return;
        }

        let i = 0;
        while (i < sLen) {
            do t.appendChar(s.charAt(i));
            let i = i + 1;
        }

        return;
    }

    function boolean eq(String s, String t) {
        var int i;
        var int sLen, tLen;

        let sLen = s.length();
        let tLen = t.length();
        let i = 0;
        while ( (i<sLen) & (i<tLen) ) {
            if (~(s.charAt(i) = t.charAt(i))) {
                return false;
            }
            let i = i + 1;
        }

        if ( (i<sLen) | (i<tLen)) {
            return false;
        }

        return true;
    }

    function String dup(String s) {
        var int i, len;
        var String t;

        if (s = null) {
            return null;
        }

        let len = s.length();
        let t = String.new(len);
        let i = 0;

        while (i < len) {
            do t.appendChar(s.charAt(i));
            let i = i + 1;
        }

        return t;
    }

    function int index(String s, String list, int i) {
        var char c;
        var int j;
        var int sLen, listLen;

        let sLen = s.length();
        let listLen = list.length();

        while (i < sLen) {
            let c = s.charAt(i);
            let j = 0;
            while (j < listLen) {
                if (c = list.charAt(j)) {
                    return i;
                }
                let j = j + 1;
            }
            let i = i + 1;
        }

        return i;
    }

    function int cIndex(String s, char c, int i) {
        while (i < s.length()) {
            if (c = s.charAt(i)) {
                return i;
            }
            let i = i + 1;
        }
        return i;
    }

    function int tkn(String s, String t, String list, int i) {
        var int j;

        let j = i;

        if (list = null) {
            let i = s.length();
        } else {
            let i = Str.index(s, list, i);
        }

        while (j < i) {
            do t.appendChar(s.charAt(j));
            let j = j + 1;
        }

        return i;
    }

    /* collect substring of nested blocks
     * delimited by l and r from s into t;
     * return last used index + 1
     */
    function int block(String s, String t, char l, char r, int i) {
        /* i + 1 is returned because the loop breaks on the closing delim.
           Adding one to the index indicates EOS where appropriate or
           an unclosed block as i will be greater than s.length().
           Or it conveniently places i on what is likely an operator. */
        var char c;
        var int blk, sLen;

        let sLen = s.length();
        let blk = 0;
        while (i < sLen) {
            let c = s.charAt(i);
            do t.appendChar(c);
            if (c = l) {
                let blk = blk + 1;
            } else { if (c = r) {
                let blk = blk - 1;
            }}
            if (blk = 0) {
                return i + 1;
            }
            let i = i + 1;
        }

        return i + 1;
    }

    function int quotes(String s, String t, int i) {
        var char c;
        var int len;

        let len = s.length();
        do t.appendChar(s.charAt(i));
        let i = i + 1;
        
        while (i < len) {
            let c = s.charAt(i);
            do t.appendChar(c);
            if (c = 34) {
                return i + 1;
            }
            let i = i + 1;
        }

        return i + 1;  // EOS while scanning for quote
    }

    function void shift(String s, int off, int whence) {
        var int i, sLen;

        let sLen = s.length();

        if ( (sLen=0) | (sLen<off) ) {
            return;
        }

        let i = whence;
        while (i < sLen) {
            if ( (i+off) < sLen ) {
                do s.setCharAt(i, s.charAt(i+off));
            }
            let i = i + 1;
        }

        while (off > 0) {
            do s.eraseLastChar();
            let off = off - 1;
        }

        return;
    }

    function int lskip(String s, char c, int i) {
        while (i < s.length()) {
            if (~(s.charAt(i) = c)) {
                return i;
            }
            let i = i + 1;
        }

        return i;
    }

    function void rstrip(String s, char c) {
        while (s.length() > 0) {
            if (~(s.charAt(s.length()-1) = c)) {
                return;
            }
            do s.eraseLastChar();
        }

        return;
    }
       
    function int count(String s, char c) {
        var int i, n;

        let n = 0;
        let i = 0;
        while (i < s.length()) {
            if (s.charAt(i) = c) {
                let n = n + 1;
            }
            let i = i + 1;
        }

        return n;
    }
}
