/* depends on Symbol.jack, Collection.jack */
class HashTable {

    field int HASHSIZ;
    field Array table;


    constructor HashTable new(int hsize) {
        var int i;

        let HASHSIZ = hsize;
        let table = Array.new(HASHSIZ);
        let i = 0;
        while (i < HASHSIZ) {
            let table[i] = Collection.new();
            let i = i + 1;
        }

        return this;
    }


    method void dispose() {
        var int i;
        var Collection b;

        let i = 0;
        while (i < HASHSIZ) {
            let b = table[i];
            do d.dispose();
            let i = i + 1;
        }

        do table.dispose();
        do Memory.deAlloc(this);

        return;
    }


    method int hashSize() {
        return HASHSIZ;
    }


    method Symbol bucket(int i) {
        return table[i];
    }


    method int _lookup(String s) {
        var int i;
        var Collection b;
        var Symbol p;

        let b = table[hash(s)];
        let i = 0;
        while (i < b.length()) {
            let p = b.nth(i);
            if (HashTable.streq(s, p.name())) {
                return i;
            }
            let i = i + 1;
        }

        return -1;
    }


    method Symbol lookup(String s) {
        var int i;
        var Collection b;

        let i = _lookup(s);

        if (i < 0) {
            return null;
        }

        let b = table[hash(s)];

        return b.nth(i);
    }


    method void install(String name, int type, int val) {
        var Collection b;
        var Symbol p;

        let p = lookup(name);

        if (p = null) {
            let b = table[hash(name)];
            do b.push(Symbol.new(name, type, val));
        } else {
            do p.setData(val);
            do p.setMeta(type);
        }

        return;
    }


    method Symbol delete(String name) {
        var int i;
        var Collection b;

        let b = table[hash(name)];
        let i = _lookup(name);

        if (i < 0) {
            return null;
        }

        return b.remove(i);
    }


    method int hash(String s) {
        var int h, i;

        let h = 0;
        let i = 0;
        while (i < s.length()) {
            let h = s.charAt(i) + (15*h);
            let i = i + 1;
        }

        return Math.abs(mod(h));
    }


    method int mod (int n) {
        var int q;

        let q = n / HASHSIZ;

        return n - (q*HASHSIZ);
    }


    function boolean streq(String s, String t) {
        var int i;

        if (s = t) {
            return true;
        }

        if ( (s=null) | (t=null) ) {
            return false;
        }

        if (~(s.length() = t.length())) {
            return false;
        }

        let i = 0;
        while (i < s.length()) {
            if (~(s.charAt(i) = t.charAt(i))) {
                return false;
            }
            let i = i + 1;
        }

        return true;
    }

}

