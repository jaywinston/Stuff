class HashTable {

    static int HASHSIZ;
    field Array table;


    constructor HashTable new() {
        var int i;

        let HASHSIZ = 16;
        let table = Array.new(HASHSIZ);
        let i = 0;
        while (i < HASHSIZ) {
            let table[i] = null;
            let i = i + 1;
        }
        return this;
    }

    method void dispose() {
        do table.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method Symbol lookup(String s) {
        var Symbol p;

        let p = table[HashTable.hash(s)];
        while (~(p = null)) {
            if (Str.eq(s, p.name())) {
                return p;
            }
            let p = p.next();
        }

        return null;
    }

    method void install(String name, int type, int val) {
        var int hashval;
        var Symbol p;

        let p = lookup(name);
        if (p = null) {
            let p = Symbol.new(name, type, val);
            let hashval = HashTable.hash(name);
            do p.setNext(table[hashval]);
            let table[hashval] = p;
        } else {
            do p.setType(type);
            do p.setValue(val);
        }

        return;
    }

    function int hash(String s) {
        var int h, i;

        let h = 0;
        let i = 0;
        while (i < s.length()) {
            let h = s.charAt(i) + (15*h);
            let i = i + 1;
        }

        return Math.abs(Lib.mod(h, HASHSIZ));
    }

}

