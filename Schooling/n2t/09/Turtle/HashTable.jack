class HashTable {

    field int HASHSIZ;
    field Array table;


    constructor HashTable new(int hsize) {
        var int i;

        let HASHSIZ = hsize;
        let table = Array.new(HASHSIZ);
        let i = 0;
        while (i < HASHSIZ) {
            let table[i] = null;
            let i = i + 1;
        }

        return this;
    }


    method void dispose() {
        do table.dispose();
        do Memory.deAlloc(this);
        return;
    }


    method int hashSize() {
        return HASHSIZ;
    }


    method Symbol bucket(int i) {
        return table[i];
    }


    method Symbol lookup(String s) {
        var Symbol p;

        let p = table[hash(s)];
        while (~(p = null)) {
            if (HashTable.streq(s, p.name())) {
                return p;
            }
            let p = p.next();
        }

        return null;
    }


    method void install(String name, int type, int val) {
        var int hashval;
        var String s;
        var Symbol p;

        let p = lookup(name);

        if (p = null) {
            let p = Symbol.new(name, type, val);
            let hashval = hash(name);
            do p.setNext(table[hashval]);
            let table[hashval] = p;
        } else {
            do p.setData(val);
            do p.setMeta(type);
        }

        return;
    }


    method int hash(String s) {
        var int h, i;

        let h = 0;
        let i = 0;
        while (i < s.length()) {
            let h = s.charAt(i) + (15*h);
            let i = i + 1;
        }

        return Math.abs(Vector.mod(h, HASHSIZ));
    }


    function boolean streq(String s, String t) {
        var int i;

        if (s = null) {
            if (t = null) {
                return true;
            } else {
                return false;
            }
        }

        if (t = null) {
            return false;
        }

        if (~(s.length() = t.length())) {
            return false;
        }

        let i = 0;
        while (i < s.length()) {
            if (~(s.charAt(i) = t.charAt(i))) {
                return false;
            }
            let i = i + 1;
        }

        return true;
    }
}

