class HashTable {

    field int HASHSIZ;
    field Array table;


    constructor HashTable new(int hsize) {
        var int i;

        let HASHSIZ = hsize;
        let table = Array.new(HASHSIZ);
        let i = 0;
        while (i < HASHSIZ) {
            let table[i] = null;
            let i = i + 1;
        }
        return this;
    }


    method void dispose() {
        do table.dispose();
        do Memory.deAlloc(this);
        return;
    }


    method Symbol lookup(String s) {
        var Symbol p;

        let p = table[hash(s)];
        while (~(p = null)) {
            if (Str.eq(s, p.name())) {
                return p;
            }
            let p = p.next();
        }

        return null;
    }


    method void install(String name, int type, int val) {
        var int hashval;
        var String s;
        var Symbol p;

        let p = lookup(name);

        if (p = null) {
            let p = Symbol.new(name, type, val);
            let hashval = hash(name);
            do p.setNext(table[hashval]);
            let table[hashval] = p;
        } else {
            if (p.type() = Symbol.FUNC()) {
                do Symbol.clear(p.value());
            } else { if (p.type() = Symbol.STR()) {
                let s = p.value();
                do s.dispose();
            }}
            do p.setValue(val);
            do p.setType(type);
        }

        return;
    }


    method void delete(String name) {
        var int hashval;
        var Symbol sym, prev;

        let sym = lookup(name);

        if (sym = null) {
            return;
        }

        let hashval = hash(name);

        let prev = table[hashval];

        if (prev = sym) {
            let table[hashval] = sym.next();
            do sym.dispose();
            return;
        }

        while (~(prev.next() = sym)) {
            let prev = prev.next();
        }

        do prev.setNext(sym.next());

        do sym.dispose();

        return;
    }


    method int hash(String s) {
        var int h, i;

        let h = 0;
        let i = 0;
        while (i < s.length()) {
            let h = s.charAt(i) + (15*h);
            let i = i + 1;
        }

        return Math.abs(Lib.mod(h, HASHSIZ));
    }

}

