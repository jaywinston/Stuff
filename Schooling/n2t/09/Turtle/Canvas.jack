class Canvas {

    field int top, left, height, width;
    field int _errno;
    field String PS1, PS2, ps;
    field Parser parser;
    field Turtle t;
    field TextBox tb;

    static int PENUP, PENDOWN, TURNLEFT, TURNRIGHT, FORWARD, BLOCK, CLEAR;
    static Array ERRTAB;

    constructor Canvas new(int i, int j, int h, int w,
                           String ps1, String ps2) {
        let top = i;
        let left = j;
        let height = h;
        let width = w;
        let _errno = 0;
        let PS1 = ps1;
        let PS2 = ps2;
        let ps = PS1;
        let tb = TextBox.new(top, left, height, width);
        do getTurtle();
        let parser = Parser.new();
        return this;
    }

    method void dispose() {
        do t.dispose();
        do tb.dispose();
        do Memory.deAlloc(this);
        return;
    }

    function void init() {
        let PENUP     = Canvas.hash("PENUP");
        let PENDOWN   = Canvas.hash("PENDOWN");
        let TURNLEFT  = Canvas.hash("TURNLEFT");
        let TURNRIGHT = Canvas.hash("TURNRIGHT");
        let FORWARD   = Canvas.hash("FORWARD");
        let BLOCK     = Canvas.hash("BLOCK");
        let CLEAR     = Canvas.hash("CLEAR");

        let ERRTAB = Array.new(4);
        let ERRTAB[0] = lib.NULLS();
        let ERRTAB[1] = "too many arguments";
        let ERRTAB[2] = "too few arguments";
        let ERRTAB[3] = "wrong type";

        return;
    }

    function int hash(String s) {
        var int n;

        let n = lib.hash(s);
        do s.dispose();
        return n;
    }

    method void clear() {
        do tb.clear();
        do t.dispose();
        do getTurtle();
        return;
    }

    method void getTurtle() {
        let t = Turtle.new(((left*2) + width) * 4,
                           (top + (height/2)) * 11,
                           90);
        return;
    }

    method String exec(String s) {
        var int tknhash;
        var int n;
        var List argv, p;

        if (s.length() = 0) {
            return ps;
        }

        let argv = parser.parse(s);

        if (argv = null) {
            return ps;
        }

        let tknhash = argv.object();
        let p = argv;
        let argv = argv.next();
        do p.setNext(null);
        do p.dispose();

        if (tknhash = PENUP) {
            if (~(argv = null)) {
                let _errno = 1;
            } else {
                do t.penup();
            }
        }
        if (tknhash = PENDOWN) {
            if (~(argv = null)) {
                let _errno = 1;
            } else {
                do t.pendown();
            }
        }
        if (tknhash = TURNLEFT) {
            if (argv = null) {
                let _errno = 2;
            } else { if (~(argv.next() = null)) {
                let _errno = 1;
            } else {
                do t.turnleft(argv.object());
            }}
        }
        if (tknhash = TURNRIGHT) {
            if (argv = null) {
                let _errno = 2;
            } else { if (~(argv.next() = null)) {
                let _errno = 1;
            } else {
                do t.turnright(argv.object());
            }}
        }
        if (tknhash = FORWARD) {
            if (argv = null) {
                let _errno = 2;
            } else { if (~(argv.next() = null)) {
                let _errno = 1;
            } else {
                do t.forward(argv.object());
            }}
        }
        if (tknhash = BLOCK) {
            let ps = PS2;
        }

        do argv.dispose();
        return ps;
    }

    method int errno() {
        return _errno;
    }

    method String error() {
        return ERRTAB[-_errno];
    }

    /* stub */
    method String clearErr() {
        var String s;

        let _errno = 0;
        return lib.NULLS();
    }
}
