class Canvas {

    field int top, left, height, width;
    field String PS1, PS2, ps;
    field Parser parser;
    field Turtle t;
    field TextBox tb;

    static int BLOCK, CLEAR, FORWARD, FUNCTION, PENDOWN, PENUP, PRINT,
                TURNLEFT, TURNRIGHT, QUIT;
    static int TYPE, CMD, CMDLIN, FUNC, INT, STR;

    constructor Canvas new(int i, int j, int h, int w,
                           String ps1, String ps2) {
        let top = i;
        let left = j;
        let height = h;
        let width = w;
        let PS1 = ps1;
        let PS2 = ps2;
        let ps = PS1;
        let tb = TextBox.new(top, left, height, width);
        let parser = Parser.new();

        let TYPE      = parser.lookup("type");
        let CMD       = parser.lookup("cmd");
        let CMDLIN    = parser.lookup("cmdlin");
        let FUNC      = parser.lookup("func");
        let INT       = parser.lookup("int");
        let STR       = parser.lookup("str");

        let BLOCK     = parser.lookup("BLOCK");
        let CLEAR     = parser.lookup("CLEAR");
        let FORWARD   = parser.lookup("FORWARD");
        let FUNCTION  = parser.lookup("FUNCTION");
        let PENUP     = parser.lookup("PENUP");
        let PENDOWN   = parser.lookup("PENDOWN");
        let PRINT     = parser.lookup("PRINT");
        let PRINT     = parser.lookup("REPEAT");
        let TURNLEFT  = parser.lookup("TURNLEFT");
        let TURNRIGHT = parser.lookup("TURNRIGHT");
        let QUIT      = parser.lookup("QUIT");

        do Error.set(0);
        do getTurtle();

        return this;
    }

    method void dispose() {
        do PS1.dispose();
        do PS2.dispose();
        do parser.dispose();
        do t.dispose();
        do tb.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void clear() {
        do tb.clear();
        do t.dispose();
        do getTurtle();
        return;
    }

    method void getTurtle() {
        let t = Turtle.new(((left*2) + width) * 4,
                           (top + (height/2)) * 11,
                           90);
        return;
    }

    /* stub */
    method String exec(String s) {
        var int cmd, type, nval;
        var int n;
        var String sval;
        var Symbol argv, p;

        if (s.length() = 0) {
            return ps;
        }

        let argv = parser.parse(s);

        if (argv = true) {
            return ps;
        }

        if (argv = null) {
            do Error.set(4);
            return ps;
        }

        if (~(argv.type() = CMD)) {
            do Error.set(3);
            return ps;
        }

        let cmd = argv.value();
        let p = argv;
        let argv = argv.next();
        do p.dispose();

        if (cmd = PENUP) {
            if (~(argv = null)) {
                do Error.set(1);
            } else {
                do t.penup();
            }
        }
        if (cmd = PENDOWN) {
            if (~(argv = null)) {
                do Error.set(1);
            } else {
                do t.pendown();
            }
        }
        if (cmd = TURNLEFT) {
            if (argv = null) {
                do Error.set(2);
            } else { if (~(argv.next() = null)) {
                do Error.set(1);
            } else {
                do t.turnleft(argv.value());
            }}
        }
        if (cmd = TURNRIGHT) {
            if (argv = null) {
                do Error.set(2);
            } else { if (~(argv.next() = null)) {
                do Error.set(1);
            } else {
                do t.turnright(argv.value());
            }}
        }
        if (cmd = FORWARD) {
            if (argv = null) {
                do Error.set(2);
            } else { if (~(argv.next() = null)) {
                do Error.set(1);
            } else {
                do t.forward(argv.value());
            }}
        }
        if (cmd = BLOCK) {
            let ps = PS2;
        }

/* will be ...
        if (cmd = BLOCK) {
        } else { if (cmd = CLEAR) {
        } else { if (cmd = FORWARD) {
        } else { if (cmd = FUNCTION) {
        } else { if (cmd = PENDOWN) {
        } else { if (cmd = PENUP) {
        } else { if (cmd = PRINT) {
        } else { if (cmd = TURNLEFT) {
        } else { if (cmd = TURNRIGHT) {
        } else { if (cmd = QUIT) {
        }}}}}}}}}}
*/

        if (~(argv = null)) {
            do argv.dispose();
        }

        return ps;
    }

}
