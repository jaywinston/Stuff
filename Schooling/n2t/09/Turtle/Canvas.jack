class Canvas {

    field int bottom, left, right, top;
    field int braces;
    field int repeat;
    field String PS1, PS2, ps;
    field String fName;
    field TextBox tb;
    field Turtle t;
    field HashTable symtab;
    field Symbol block, blocks, cmdp, cmds;

    static int
        NULL,
        BLK,
        CMD,
        CMDLIN,
        FUNC,
        INT,
        STR,
        SYM,

        ASSGN,
        BLOCK,
        CLEAR,
        FORWARD,
        FUNCTION,
        PENDOWN,
        PENUP,
        PRINT,
        REPEAT,
        TURNLEFT,
        TURNRIGHT,
        QUIT,
        _ECHO;

    constructor Canvas new(int i, int j, int h, int w,
                           String ps1, String ps2) {

        let symtab = HashTable.new();

        do initKWs();

        let top = i;
        let left = j;
        let bottom = i + h;
        let right = j + w;
        let block = null;
        let blocks = null;
        let braces = 0;
        let repeat = 1;
        let fName = null;
        let PS1 = ps1;
        let PS2 = ps2;
        let ps = PS1;

        let tb = TextBox.new(i, j, h, w);
        let t = newTurtle();

        return this;
    }

    method void dispose() {
        do PS1.dispose();
        do PS2.dispose();
        do TKN_DLMS.dispose();
        do EXP_DLMS.dispose();
        do t.dispose();
        do tb.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /* intialize key words and internal symbols */
    method void initKWs() {
        var int i;

        let NULL   = Const.NULL();
        let BLK    = Const.BLK();
        let CMD    = Const.CMD();
        let CMDLIN = Const.CMDLIN();
        let FUNC   = Const.FUNC();
        let INT    = Const.INT();
        let STR    = Const.STR();
        let SYM    = Const.SYM();

        let ASSGN     = Const.ASSGN();
        let BLOCK     = Const.BLOCK();
        let CLEAR     = Const.CLEAR();
        let FORWARD   = Const.FORWARD();
        let FUNCTION  = Const.FUNCTION();
        let PENDOWN   = Const.PENDOWN();
        let PENUP     = Const.PENUP();
        let PRINT     = Const.PRINT();
        let REPEAT    = Const.REPEAT();
        let TURNLEFT  = Const.TURNLEFT();
        let TURNRIGHT = Const.TURNRIGHT();
        let QUIT      = Const.QUIT();

        return;
    }

    method void clear() {
        do t.dispose();
        do tb.clear();
        let t = newTurtle();
        return;
    }

    method Turtle newTurtle() {
        return Turtle.new(((2*left) + (right-left)) * 4,
                           ((2*bottom) + (top-bottom)) * 5,
                           90);
    }

    method Symbol ready(Symbol p) {
        if (~(p = null)) {
            do Canvas.clearSym(p);
        }
        return ps;
    }

    /* execute a command line */
    method Symbol exec(String s) {
        var int cmd;
        var Symbol argv;

        if (s = null) {
            return null;
        }

        if (s.length() = 0) {
            return null;
        }

        let argv = Eval.eval(s);

        if (argv = null) {
            return null;
        }

        if (argv.type() = NULL) {
            do Error.send("unrecognized token"); // ##DB##
            do Error.set(1);  // unrecognized token
            return null;
        }

        if (argv.type() = CMD) {
            let cmd = argv.value();
        } else { if (argv.type() = FUNC) {
            do call(argv);
            let cmd = NULL;
        } else {
            return argv;
        }}

        if (cmd = BLOCK)            { do doBlock(argv);            }
        else { if (cmd = CLEAR)     { do doClear(argv.next());     }
        else { if (cmd = FORWARD)   { do doForward(argv.next());   }
        else { if (cmd = FUNCTION)  { do doFunction(argv.next());  }
        else { if (cmd = PENDOWN)   { do doPendown(argv.next());   }
        else { if (cmd = PENUP)     { do doPenup(argv.next());     }
        else { if (cmd = PRINT)     { do doPrint(argv.next());     }
        else { if (cmd = REPEAT)    { do doRepeat(argv.next());    }
        else { if (cmd = TURNLEFT)  { do doTurnleft(argv.next());  }
        else { if (cmd = TURNRIGHT) { do doTurnright(argv.next()); }
        else { if (cmd = QUIT)      { do doQuit(argv.next());      }
        }}}}}}}}}}

        do Canvas.clearSym(argv);

        return null;
    }

    method void call(Symbol argv) {
        var int n, type;
        var String arg, intfs;
        var Symbol p;

        let intfs = "$%d";
        let n = 1;
        let p = argv.next();
        while (~(p = null)) {
            do symtab.install(Str.format(intfs, n), p.type(), p.value());
            let n = n + 1;
            let p = p.next();
        }

        do execBlock(argv.value());

        do intfs.dispose();

        return;
    }

    method void execBlock(Symbol b) {
        var int blkd;

        let blkd = braces;
        let braces = 0;
        while (~(b = null)) {
            do exec(b.value());
            let b = b.next();
        }
        let braces = blkd;
        return;
    }

    method void doBlock(Symbol arg) {
        if (arg = null) {
            do Error.set(1);  // doBlock(): arg is null
            return;
        }

        if ( (~(arg.type()=CMD)) & (~(arg.value()=BLOCK)) ) {
            do Error.set(1);  // doBlock(): not CMD or not BLOCK
            return;
        }

        /* might not */
        if (~(arg.next() = null)) {
            do Error.set(1);  // token after lbrace
            return;
        }

        let braces = braces + 1;
        do pushBlock(block);
        let block = null;
        let ps = PS2;

        return;
    }

    method void doClear(Symbol arg) {
        do clear();
        return;
    }

    method void doForward(Symbol arg) {
        do t.forward(arg.value());
        return;
    }

    method void doFunction(Symbol arg) {

        if (arg = null) {
            do Error.set(1);  // no function name
            return;
        }

        if (~(arg.type() = SYM)) {
            //do Error.set(1);  // no function name
            //return;
        }

        let fName = Str.dup(arg.name());

        return;
    }

    method void doPendown(Symbol arg) {
        do t.pendown();
        return;
    }

    method void doPenup(Symbol arg) {
        do t.penup();
        return;
    }

    method void doPrint(Symbol arg) {
        return;
    }

    method void doRepeat(Symbol arg) {
        let repeat = arg.value();
        return;
    }

    method void doTurnleft(Symbol arg) {
        do t.turnleft(arg.value());
        return;
    }

    method void doTurnright(Symbol arg) {
        do t.turnright(arg.value());
        return;
    }

    method void doQuit(Symbol arg) {
        do Sys.halt();
        return;
    }

    method void echo(Symbol sym) {
        if (sym.type() = STR) {
            do Error.send(sym.value());
        } else {
            do echoInt(sym);
        }
        return;
    }

    method void echoInt(Symbol sym) {
        var String s;

        let s = String.new(5);
        do s.setInt(sym.value());
        do Error.send(s);
        return;
    }

    method void pushBlock(Symbol blk) {
        var Symbol top;

        let top = Symbol.new(null, SYM, blk);
        do top.append(blocks);
        let blocks = top;
        return;
    }

    method Symbol popBlock() {
        var Symbol blk, top;

        let top = blocks;
        let blocks = blocks.next();
        let blk = top.value();
        do top.dispose();
        return blk;
    }

    method void pushCmd(Symbol cmd) {
        var Symbol top;

        let top = Symbol.new(null, SYM, cmd);
        do top.append(cmds);
        let cmds = top;
        return;
    }

    method Symbol popCmd() {
        var Symbol cmd, top;

        let top = cmds;
        let cmds = cmds.next();
        let cmd = top.value();
        do top.dispose();
        return cmd;
    }

    function void clearSym(Symbol sym) {
        var int type;
        var String s;
        var Symbol p;

        while (~(sym = null)) {
            let p = sym;
            let sym = sym.next();

            let type = p.type();
            if ( (type=STR) | (type=CMDLIN) ) {
                let s = p.value();
                if (~(s = null)) {
                    do s.dispose();
                }
            } else { if (type = BLK) {
                do Canvas.clearSym(p.value());
            }}
            do p.dispose();
        }

        return;
    }

}
