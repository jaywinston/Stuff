class Eval {

    static boolean storing;
    static int CMD, INT, STR;
    static int TERM;
    static Array INTOPS;
    static String ASSGNDLMS, /*ARGLISTDLMS,*/ EXP_DLMS;
    static String BLANKS, EQS, PERCENTS;
    static HashTable symtab;

    function void init() {
        let storing = false;

        let CMD = Const.CMD();
        let INT = Const.INT();
        let STR = Const.STR();

        let TERM = 4;

        let EXP_DLMS = "=!<>&|+-*/%(){}";
        let BLANKS = " ";
        let EQS = "=";
        let PERCENTS = "%";

/*
        let ARGLISTDLMS = String.new(3);
        do ARGLISTDLMS.appendChar(32);   // ' '
        do ARGLISTDLMS.appendChar(34);   // '"'
        do ARGLISTDLMS.appendChar(123);  // '{'
*/

        let ASSGNDLMS = String.new(3);
        do ASSGNDLMS.appendChar(61);   // '='
        do ASSGNDLMS.appendChar(34);   // '"'
        do ASSGNDLMS.appendChar(123);  // '{'

        let INTOPS = Array.new(4);
        let INTOPS[0] = "&|(){}";
        let INTOPS[1] = "=!<>(){}";
        let INTOPS[2] = "+-(){}";
        let INTOPS[3] = "*/%(){}";

        let symtab = HashTable.new();

        do Eval.installKW("CLEAR",     Const.CLEAR());
        do Eval.installKW("FORWARD",   Const.FORWARD());
        do Eval.installKW("FUNCTION",  Const.FUNCTION());
        do Eval.installKW("PENDOWN",   Const.PENDOWN());
        do Eval.installKW("PENUP",     Const.PENUP());
        do Eval.installKW("PRINT",     Const.PRINT());
        do Eval.installKW("REPEAT",    Const.REPEAT());
        do Eval.installKW("TURNLEFT",  Const.TURNLEFT());
        do Eval.installKW("TURNRIGHT", Const.TURNRIGHT());
        do Eval.installKW("QUIT",      Const.QUIT());

        return;
    }

    function void installKW(String name, int val) {
        do symtab.install(name, CMD, val);
        do name.dispose();
        return;
    }

    function Symbol eval(String s) {
        var char c;
        var int i, j;
        var String t;

        if (s.length() = 0) {
            return null;
        }

        /* build block here */

        return Eval.argList(s, i);
    }

    function void assign(String s, int i) {
        var String name;
        var Symbol value;

        if (s.charAt(i) = 61) {
            do Error.send("expected name");  // ##DB##
            do Error.set(1);  // expected name
            return;
        }

        let name = String.new(s.length());
        let i = Str.tkn(s, name, EQS, i);

        if (Eval.invalidName(name)) {
            do Error.send("invalid name");  // ##DB##
            do Error.set(1);  // invalid name
            return;
        }

        let value = Eval.argList(s, i+1);

        if (Error.isSet()) {
            do name.dispose();
            do Canvas.clearSym(value);
            return;
        }

        if (~(value.next() = null)) {
            do Error.send("multiple values in assignment");  // ##DB##
            do Error.set(1);  // multiple values in assignment
            do name.dispose();
            do Canvas.clearSym(value);
            return;
        }

        if (value.type() = STR) {
            do symtab.install(name, value.type(), Str.dup(value.value()));
        } else {
            do symtab.install(name, value.type(), value.value());
        }
        do name.dispose();
        do Canvas.clearSym(value);

        return;
    }

    function boolean invalidName(String s) {
        return ((s.charAt(0)>47) & (s.charAt(0)<58))
                | (Str.index(s, EXP_DLMS, 0) < s.length());
    }

    function Symbol argList(String s, int i) {
        var int j;
        var String t;
        var Symbol argv;

        if (i > s.length()) {
            return null;
        }

        let i = Str.lskip(s, 32, i);

        if (i = s.length()) {
            return null;
        }

        let t = String.new(s.length());

        if (s.charAt(i) = 34) {
            let i = Str.quotes(s, t, i);
            if (i > s.length()) {
                do Error.send("unclosed quote");  // ##DB##
                do Error.set(1);  // unclosed quote
                do t.dispose();
                return null;
            }
        } else { if (s.charAt(i) = 123) {
            let i = Str.block(s, t, 123, 125, i);
        } else {
            let i = Str.tkn(s, t, BLANKS, i);
        }}

        let j = Str.index(t, ASSGNDLMS, 0);

        if ( ((j+1)<t.length()) & (j>0) ) {
            if (t.charAt(j) = 61) {
                if ( ~( ((t.charAt(j-1)=33)
                      |  (t.charAt(j-1)=60))
                      | ((t.charAt(j+1)=61)
                      |  (t.charAt(j-1)=62)) ) ) {
                    do Eval.assign(t, 0);
                    do t.dispose();
                    return Eval.argList(s, i);
                }
            }
        }

        let argv = Eval.expression(t);

        do t.dispose();

        if (Error.isSet()) {
            do Canvas.clearSym(argv);
            return null;
        }

        do argv.append(Eval.argList(s, i));

        return argv;
    }

/*
    function Symbol Block(String s, int i) {
        return null;
    }
*/

    function Symbol expression(String s) {
        var char c;

        let c = s.charAt(0);

        if (c = 34) {
            return Symbol.new(null, STR, Eval.StringExpr(s));
        }

        if ( ~((c>47) & (c<58) ) & (Str.index(s, EXP_DLMS, 0) = s.length()) ) {
            return Eval.SymbolExpr(s);
        }

        return Symbol.new(null, INT, Eval.intExpr(s, 0, 0));
    }

    function String StringExpr(String s) {
        do s.eraseLastChar();
        do Str.shift(s, 1, 0);
        return Str.dup(Eval.format(s));
    }

    function String format(String s) {
        var int i;

        let i = 0;

        while (i < s.length()) {

            let i = Str.index(s, PERCENTS, i);

            if ((i+1) < s.length()) {
                if (s.charAt(i+1) = 81) {
                    do s.setCharAt(i, 34);
                } else { if (s.charAt(i+1) = 80) {
                    do s.setCharAt(i, 37);
                } else { if (s.charAt(i+1) = 78) {
                    do s.setCharAt(i, 128);
                } else {
                    do Error.send("unrecognized format specifier");  // ##DB##
                    do Error.set(1);
                    do t.dispose();
                    return null;
                }}}

                let i = i + 1;
                do Str.shift(s, 1, i);

            }  // todo: error no fspec
        }

        return s;
    }

    function Symbol SymbolExpr(String s) {
        var Symbol p;

        let p = symtab.lookup(s);
        if (p = null) {
            do Error.send("undefined symbol");  // ##DB##
            do Error.set(1);
            return null;
        }
        return Symbol.new(null, p.type(), p.value());
    }

    function int intTkn(String s, String t, String list, int i) {

        let i = Str.tkn(s, t, list, i);

        if (i < s.length()) {
            if (s.charAt(i) = 40) {
                let i = Str.block(s, t, 40, 41, i);
                if (i < s.length()) {
                    let i = Eval.intTkn(s, t, list, i);
                }
            } else { if (s.charAt(i) = 123) {
                let i = Str.block(s, t, 123, 125, i);
                if (i < s.length()) {
                    let i = Eval.intTkn(s, t, list, i);
                } else { if (i > s.length()) {
                    /* todo: eval block */
                }}
            }}
        }

        return i;
    }

    function int intExpr(String s, int i, int depth) {
        var char op;
        var int n;
        var String t;

        if (i = s.length()) {
            do Error.send("expected integer expression");  // ##DB##
            do Error.set(1);  //  expected integer expression
            return 0;
        }
            
        if (depth = TERM) {
            return Eval.term(s);
        }

        if (s.charAt(i) = 45) {
            return -Eval.intExpr(s, i+1, depth);
        }

        if (s.charAt(i) = 126) {
            return ~Eval.intExpr(s, i+1, depth);
        }

        let t = String.new(s.length());
        let i = Eval.intTkn(s, t, INTOPS[depth], i);

        if (t.length() = 0) {
            do Error.send("unexpected operator");  // ##DB##
            do Error.set(1);  // unexpected operator
            do t.dispose();
            return 0;
        }

        if ( (i>s.length()) & ~storing ) {
            do Error.send("expected parentheses");  // ##DB##
            do Error.set(1);  //  expected parentheses
            do t.dispose();
            return 0;
        }

        let n = Eval.intExpr(t, 0, depth+1);

        do t.dispose();

        if (i < s.length()) {

            let op = s.charAt(i);

            if ( (i+1) < s.length() ) { if (s.charAt(i+1) = 61) {
                let op = op + 200;
                let i = i + 1;
            }}

            let n = Eval.operate(n, Eval.intExpr(s, i+1, depth), op);
        }

        return n;
    }

    function int term(String s) {
        var char c;
        var Symbol p;

        let c = s.charAt(0);

        if ( (c>47) & (c<58) ) {
            return s.intValue();
        }

        if ( (c=40) | (c=123) ) {
            return Eval.blockExpr(s);
        }

        let p = Eval.SymbolExpr(s);

        if (Error.isSet()) {
            return 0;
        }

        if (~(p.type() = INT)) {
            do Error.send("wrong type; expected integer");  // ##DB##
            do Error.set(1);  // wrong type; expected integer
            return 0;
        }

        return p.value();
    }

    function int operate(int m, int n, char op) {

        if ( ((op=47) | (op=37)) & (n=0) ) {
            do Error.send("division by zero");  // ##DB##
            do Error.set(1);  // division by zero
            return 0;
        }

        if (op =  38) { return m & n; }
        if (op = 124) { return m | n; }

        if (op =  43) { return m + n; }
        if (op =  45) { return m - n; }
        if (op =  42) { return m * n; }
        if (op =  47) { return m / n; }
        if (op =  37) { return lib.mod(m, n); }

        if (op = 261) { return   m = n;  }
        if (op = 233) { return ~(m = n); }
        if (op =  60) { return   m < n;  }
        if (op =  62) { return   m > n;  }
        if (op = 260) { return  (m<n) | (m=n); }
        if (op = 262) { return  (m>n) | (m=n); }

        do Error.send("unrecognized operator");  // ##DB##
        do Error.set(1);  // unrecognized operator
        return 0;
    }

    /* stub */
    function int blockExpr(String s) {
        var Symbol p;

        if (s.charAt(0) = 40) {
            do s.eraseLastChar();
            do Str.shift(s, 1, 0);
            return Eval.intExpr(s, 0, 0);
        }

        return 0;
    }

}
