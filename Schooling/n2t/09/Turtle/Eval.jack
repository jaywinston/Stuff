class Eval {

    static boolean buildingBlock;
    static int CMD, ASSGN, INT, STR, TERM;
    static Array INTOPS;
    static String TKN_DLMS, EXP_DLMS;
    static String ADDOPS, BLANKS, EQS, MULOPS, RBLOCKS, EQOPS, LOGOPS, PERCENTS;
    static String ADDDLMS, MULDLMS, EQDLMS, LOGDLMS;
    static String CL_DLMS;
    static HashTable symtab;

    function void init() {
        let buildingBlock = false;
        let CMD = Const.CMD();
        let ASSGN = Const.ASSGN();
        let INT = Const.INT();
        let STR = Const.STR();
        let TKN_DLMS = " =";
        let EXP_DLMS = "=!<>&|+-*/%(){}";
        let BLANKS = " ";
        let EQS = "=";
        let RBLOCKS = "({";
        let PERCENTS = "%";
        let INTOPS = Array.new(4);
        let INTOPS[0] = "&|)}{(";
        let INTOPS[1] = "=!<>)}({";
        let INTOPS[2] = "+-)}({";
        let INTOPS[3] = "*/%)}({";
        let TERM = 4;
        let LOGDLMS = "&|(){}";
        let EQDLMS = "=!<>(){}";
        let ADDDLMS = "+-(){}";
        let MULDLMS = "*/%(){}";
        let CL_DLMS = String.new(4);
        do CL_DLMS.appendChar(32);
        do CL_DLMS.appendChar(34);
        do CL_DLMS.appendChar(61);
        do CL_DLMS.appendChar(123);
        let symtab = HashTable.new();
        do Eval.installKW("CLEAR",     CMD, Const.CLEAR());
        do Eval.installKW("FORWARD",   CMD, Const.FORWARD());
        do Eval.installKW("FUNCTION",  CMD, Const.FUNCTION());
        do Eval.installKW("PENDOWN",   CMD, Const.PENDOWN());
        do Eval.installKW("PENUP",     CMD, Const.PENUP());
        do Eval.installKW("PRINT",     CMD, Const.PRINT());
        do Eval.installKW("REPEAT",    CMD, Const.REPEAT());
        do Eval.installKW("TURNLEFT",  CMD, Const.TURNLEFT());
        do Eval.installKW("TURNRIGHT", CMD, Const.TURNRIGHT());
        do Eval.installKW("QUIT",      CMD, Const.QUIT());

        return;
    }

    function void installKW(String name, int type, int val) {
        do symtab.install(name, type, val);
        do name.dispose();
        return;
    }

    function Symbol eval(String s) {
        var char c;
        var int i, j;
        var String t;

        if (s.length() = 0) {
            return null;
        }

        let i = Str.lskip(s, 32, 0);
        let j = Str.index(s, CL_DLMS, i);

        if ( ((j+1)<s.length()) & (j>0) ) {
            if (s.charAt(j) = 61) {
                if ( ~( ((s.charAt(j-1)=33)
                      |  (s.charAt(j-1)=60))
                      | ((s.charAt(j+1)=61)
                      |  (s.charAt(j-1)=62)) ) ) {
                    do Eval.assign(s, i);
                    return null;
                }
            }
        } else {
            if (j < s.length())  {
                do Error.send("expected name");  // ##DB##
                do Error.set(1);  // expected name
                return null;
            }
        }

        return Eval.argList(s, i);
    }

    function Symbol assign(String s, int i) {
        var String name;
        var Symbol value;

        if (s.charAt(i) = 61) {
            do Error.send("expected name");  // ##DB##
            do Error.set(1);  // expected name
            return null;
        }

        let name = String.new(s.length());
        let i = Str.tkn(s, name, EQS, i);

        if (Eval.invalidName(name)) {
            do Error.send("invalid name");  // ##DB##
            do Error.set(1);  // invalid name
            return null;
        }

        let value = Eval.argList(s, i+1);

        if (~(value.next() = null)) {
            do Error.send("multiple values in assignment");  // ##DB##
            do Error.set(1);  // multiple values in assignment
            return null;
        }

        do symtab.install(name, value.type(), value.value());
        do name.dispose();
        do Canvas.clearSym(value);

        return null;
    }

    function boolean invalidName(String s) {
        return ((s.charAt(0)>47) & (s.charAt(0)<58))
                | (Str.index(s, EXP_DLMS, 0) < s.length());
    }

    function Symbol argList(String s, int i) {
        var String t;
        var Symbol argv;

        let t = String.new(s.length());
        let i = Str.lskip(s, 32, i);

        if (i = s.length()) {
            return null;
        }

        if (s.charAt(i) = 34) {
            let i = Str.quotes(s, t, i);
        } else { if (s.charAt(i) = 123) {
            let i = Str.block(s, t, 123, 125, i);
        } else {
            let i = Str.tkn(s, t, BLANKS, i);
        }}

        let argv = Eval.Word(t);
        do t.dispose();

        if (i < s.length()) {
            do argv.append(Eval.argList(s, i+1));
        }

        return argv;
    }

    function Symbol Word(String s) {
        var int i;
        var String t;
        var Symbol argv;

        if (s.length() = 0) {
            return null;
        }

        if (s.charAt(0) = 123) {
            return Eval.Block(s, i);
        }

        return Eval.Expression(s);
    }

    function Symbol Block(String s, int i) {
        return null;
    }

    function Symbol Expression(String s) {
        var char c;

        let c = s.charAt(0);

        if (c = 34) {
            return Symbol.new(null, STR, Eval.StringExpr(s));
        }

        if ( (((c|32)>96) & ((c|32)<123))
                & (Str.index(s, EXP_DLMS, 0)=s.length()) ) {
            return Eval.SymbolExpr(s);
        }

        //return Symbol.new(null, INT, Eval.LogicExpr(s, 0));
        return Symbol.new(null, INT, Eval.intExpr(s, 0, 0));
    }

    function String StringExpr(String s) {
        do s.eraseLastChar();
        do Str.shift(s, 1, 0);
        return Str.dup(Eval.format(s));
    }

    function String format(String s) {
        var int i;

        let i = -2;

        while (i < s.length()) {

            let i = Str.index(s, PERCENTS, i+2);

            if ((i+1) < s.length()) {
                if (s.charAt(i+1) = 81) {
                    do s.setCharAt(i, 34);
                } else { if (s.charAt(i+1) = 80) {
                    do s.setCharAt(i, 37);
                } else { if (s.charAt(i+1) = 78) {
                    do s.setCharAt(i, 128);
                } else {
                    do Error.send("unrecognized format specifier");  // ##DB##
                    do Error.set(1);
                    do t.dispose();
                    return null;
                }}}

                do Str.shift(s, 1, i+1);

            }  // todo: error no fspec
        }

        return s;
    }

    function Symbol SymbolExpr(String s) {
        var Symbol p;

        let p = symtab.lookup(s);
        if (p = null) {
            do Error.send("undefined symbol");  // ##DB##
            do Error.set(1);
            return null;
        }
        return Symbol.new(null, p.type(), p.value());
    }

    function int intTkn(String s, String t, String list, int i) {

        let i = Str.tkn(s, t, list, i);

        if (i < s.length()) {
            if (s.charAt(i) = 40) {
                let i = Str.block(s, t, 40, 41, i);
                if (i < s.length()) {
                    let i = Eval.intTkn(s, t, list, i);
                }
            } else { if (s.charAt(i) = 123) {
                let i = Str.block(s, t, 123, 125, i);
                if (i < s.length()) {
                    let i = Eval.intTkn(s, t, list, i);
                }
            }}
        }

        return i;
    }

    function int intExpr(String s, int i, int depth) {
        var boolean neg, not;
        var char op;
        var int n;
        var String t, ops;

        if (s.length() = 0) {
            do Error.send("expected expression");  // ##DB##
            do Error.set(1);  //  expected expression
            return 0;
        }

        let ops = INTOPS[depth];

        if (s.charAt(i) = 45) {
            let neg = true;
            let i = i + 1;
        } else { if (s.charAt(i) = 126) {
            let not = true;
            let i = i + 1;
        } else { if (Str.cIndex(ops, s.charAt(i), i) < (ops.length()-2) ) {
            do Error.send("expected expression");  // ##DB##
            do Error.set(1);  //  expected expression
            return 0;
        }}}

        let t = String.new(s.length());
        let i = Eval.intTkn(s, t, ops, i);

        if ( (i>s.length()) & ~buildingBlock ) {
            do Error.send("expected parentheses");  // ##DB##
            do Error.set(1);  //  expected parentheses
            do t.dispose();
            return 0;
        }

        if ( (depth+1) = TERM ) {
            let n = Eval.term(t);
        } else {
            let n = Eval.intExpr(t, 0, depth+1);
        }

        if (neg) { let n = -n; }
        if (not) { let n = ~n; }

        if (i < s.length()) {

            let op = s.charAt(i);

            if (s.charAt(i+1) = 61) {
                let i = i + 1;
                let op = 200 + op;
            }

            let n = Eval.operate(n, Eval.intExpr(s, i+1, depth), op);
        }

        do t.dispose();

        return n;
    }

    function int term(String s) {
        var char c;
        var Symbol p;

        let c = s.charAt(0);

        if ( (c>47) & (c<58) ) {
            return s.intValue();
        }

        if ( (c=40) | (c=123) ) {
            return Eval.blockExpr(s);
        }

        let p = Eval.SymbolExpr(s);

        if (Error.isSet()) {
            return 0;
        }

        if (~(p.type() = INT)) {
            do Error.send("wrong type; expected integer");  // ##DB##
            do Error.set(1);  // wring type; expected integer
            return 0;
        }

        return p.value();
    }

    /* stub */
    function int blockExpr(String s) {
        if (s.charAt(0) = 40) {
            do s.eraseLastChar();
            do Str.shift(s, 1, 0);
            return Eval.intExpr(s, 0, 0);
        }

        return 0;
    }

    function int operate(int m, int n, char op) {

        if ( ((op=47) | (op=37)) & (n=0) ) {
            do Error.send("division by zero");  // ##DB##
            do Error.set(1);  // division by zero
            return 0;
        }

        if (op =  38) { return m & n; }
        if (op = 124) { return m | n; }

        if (op =  43) { return m + n; }
        if (op =  45) { return m - n; }
        if (op =  42) { return m * n; }
        if (op =  47) { return m / n; }
        if (op =  37) { return lib.mod(m, n); }

        if (op = 261) { return   m = n;  }
        if (op = 233) { return ~(m = n); }
        if (op =  60) { return   m < n;  }
        if (op =  62) { return   m > n;  }
        if (op = 260) { return  (m=n) | (m<n); }
        if (op = 262) { return  (m=n) | (m>n); }

        do Error.send("unrecognized operator");  // ##DB##
        do Error.set(1);  // unrecognized operator
        return 0;
    }

}
