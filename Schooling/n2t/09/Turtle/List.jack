class List {

    static int INT, FUNC, LIST, LSP;
    static int APPEND, APPLY, CLEARLIST, COPY, EXTEND;

    function void init() {

        let INT = LibSym.INT();
        let FUNC = LibSym.FUNC();
        let LIST = LibSym.LIST();
        let LSP = LibSym.LSP();

        let APPEND    = 0;
        let APPLY     = 1;
        let CLEARLIST = 2;
        let EXTEND    = 3;
        let COPY      = 4;

        do Eval.install("APPEND", LSP, APPEND);
        do Eval.install("APPLY", LSP, APPLY);
        do Eval.install("CLEARLIST", LSP, CLEARLIST);
        do Eval.install("EXTEND", LSP, EXTEND);
        do Eval.install("COPY", LSP, COPY);

        return;
    }


    function Symbol process(int cmd, Collection argv) {

        if (cmd = APPEND)    { return List.append(argv);    }
        if (cmd = APPLY)     { return List.apply(argv);     }
        if (cmd = CLEARLIST) { return List.clearList(argv); }
        if (cmd = EXTEND)    { return List.extend(argv);    }
        if (cmd = COPY)      { return List.copy(argv);      }

        return null;
    }


    function void append(Collection argv) {
        var Collection l;
        var Symbol p;

        let p = Eval.arg(argv.pop());
        let l = p.data();
        do l.append(Eval.arg(argv.pop()));

        return;
    }


    function void apply(Collection argv) {
        var int i;
        var Collection list;
        var Symbol funcp, listp, ret;

        let listp = Eval.arg(argv.pop());

        if (listp = null) {
            do LibIO.error("expected list");
            return;
        }

        if (~(listp.meta() = LIST)) {
            do LibIO.error("expected list");
            do LibSym.destroySym(listp);
            return;
        }

        let list = listp.data();

        let funcp = Eval.arg(argv.pop());

        if (funcp = null) {
            do LibIO.error("expected function name");
            do LibSym.destroySym(listp);
            return;
        }

        if (~(funcp.meta() = FUNC)) {
            do LibIO.error("expected function");
            do LibSym.destroySym(listp);
            do LibSym.destroySym(funcp);
            return;
        }

        let argv = Collection.new();

        let i = 0;
        while (i < list.length()) {
            do argv.push(list.nth(i));
            let ret = Exec.call(LibSym.copySym(funcp), argv);
            do list.setnth(i, ret);
            do LibSym.eradicateSym(argv.pop());
            let i = i + 1;
        }

        do LibSym.destroySym(listp);
        do LibSym.destroySym(funcp);
        do argv.dispose();

        return;
    }


    function void clearList(Collection argv) {
        var Collection l;
        var Symbol p;

        let p = Eval.arg(argv.pop());
        let l = p.data();
        do LibSym.clearList(l);

        return;
    }


    function void extend(Collection argv) {
        var Collection l;
        var Symbol p;

        let p = Eval.arg(argv.pop());
        let l = p.data();
        let p = Eval.arg(argv.pop());
        do l.extend(p.data());

        return;
    }


    function Collection copy(Collection argv) {
        var int i, j;
        var Collection l;
        var Symbol lp, p;

        let lp = Eval.arg(argv.pop());

        if (lp = null) {
            do LibIO.error("expected list");
            return null;
        }

        if (~(lp.meta() = LIST)) {
            do LibIO.error("expected list");
            do LibSym.destroySym(lp);
            return null;
        }

        let l = lp.data();

        let p = Eval.arg(argv.pop());

        if (p = null) {
            let p = Symbol.new(null, LIST, l.slice(0, l.length()-1));
            do LibSym.destroySym(lp);
            return p;
        }

        if (~(p.meta() = INT)) {
            do LibIO.error("expected integer");
            do LibSym.destroySym(lp);
            do LibSym.destroySym(p);
            return null;
        }

        let i = p.data();
        do p.dispose();

        let p = Eval.arg(argv.pop());

        if (~(p.meta() = INT)) {
            do LibIO.error("expected integer");
            do LibSym.destroySym(lp);
            do LibSym.destroySym(p);
            return null;
        }

        let j = p.data();
        do p.dispose();

        let p = Symbol.new(null, LIST, l.slice(i, j));

        do LibSym.destroySym(lp);

        return p;

    }

}
