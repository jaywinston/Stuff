// Site use of the "meta" namespace is bit[0] to classify executables.

class Exec {

    static int BIN, BLOCK, CMD, CMDLIN, EXE, FUNC, INT, LIST, SITE, STR, NAME,
        INDEX, LSP;
    static int ASSIGN, FUNCTION, IF, LENGTH, OVER, REPEAT, QUIT;
    static String IFS, ELSES;


    function void init() {

        let IFS = "IF";
        let ELSES = "ELSE";

        let BIN = LibSym.BIN();
        let BLOCK = LibSym.BLOCK();
        let CMD = LibSym.CMD();
        let CMDLIN = LibSym.CMDLIN();
        let EXE = 1;  /* magic number! */
        let FUNC = LibSym.FUNC();
        let INDEX = LibSym.INDEX();
        let INT = LibSym.INT();
        let LIST = LibSym.LIST();
        let LSP = LibSym.LSP();
        let NAME = LibSym.NAME();
        let SITE = ~LibSym.SITE() | EXE;
        let STR = LibSym.STR();

        let ASSIGN   = 0;
        let IF       = 1;
        let LENGTH   = 2;
        let FUNCTION = 3;
        let OVER     = 4;
        let REPEAT   = 5;
        let QUIT     = 6;

do Eval.install("MC",CMD,128);  // ##DB##

        do Eval.install("ASSIGN", CMD, ASSIGN);
        do Eval.install("FUNCTION", CMD, FUNCTION);
        do Eval.install("IF", CMD, IF);
        do Eval.install("LENGTH", CMD, LENGTH);
        do Eval.install("REPEAT", CMD, REPEAT);
        do Eval.install("QUIT", CMD, QUIT);

        return;
    }


    function void kill() {
        do IFS.dispose();
        do ELSES.dispose();
        return;
    }


    function void enqueue(Symbol sym) {
        do LibIO.put(LibSym.format(sym));
        return;
    }


    function void next() {
        var Collection argv;

        let argv = Parse.next();

        if ( LibIO.err() | (argv.length()=0) ) {
            do LibSym.destroyList(argv);
            return;
        }

        do Exec.cmdlin(argv);

        return;
    }


    function void cmdlin(Collection argv) {
        var Symbol ret;

        let ret = Exec.arglist(argv);
        if (~LibIO.err()) {
            do Exec.enqueue(ret);
        }
        do LibSym.destroySym(ret);

        return;
    }


    function Symbol arglist(Collection argv) {
        var Symbol ret;

        let ret = Exec.arg(argv);
        while (argv.length() > 0) {
            if (LibIO.err()) {
                do LibSym.clearList(argv);
                do LibSym.destroySym(ret);
                return null;
            }
            do LibIO.put(LibSym.format(ret));
            do LibSym.destroySym(ret);
            let ret = Exec.arg(argv);
        }

        do argv.dispose();

        return ret;
    }


    function Symbol arg(Collection argv) {
        var Symbol arg;

        let arg = Eval.arg(argv.pop());

        if ( (arg.meta()&EXE) = EXE ) {
            return Exec.executable(arg, argv);
        }

        return arg;
    }


    function Symbol executable(Symbol arg, Collection argv) {
        var int cmd, type;

        let type = arg.meta();

        if (type = FUNC) {
            return Exec.call(arg, argv);
        }

        let cmd = arg.data();

        do arg.dispose();

if (cmd=128) {return Main.mc();}  // ##DB##

        if (type = BIN) { return Bin.exec(cmd, argv);     }
        if (type = CMD) { return Exec.cmd(cmd, argv);     }
        if (type = LSP) { return List.process(cmd, argv); }

        return null;
    }


    function Symbol cmd(int cmd, Collection argv) {

        if (cmd = ASSIGN)   { return Exec.doAssign(argv);   }
        if (cmd = FUNCTION) { return Exec.doFunction(argv); }
        if (cmd = IF)       { return Exec.doIf(argv);       }
        if (cmd = LENGTH)   { return Exec.doLength(argv);   }
        if (cmd = REPEAT)   { return Exec.doRepeat(argv);   }
        if (cmd = QUIT)     { return Exec.doQuit(argv);     }

        return null;
    }


    function Symbol call(Symbol func, Collection argv) {
        var Collection cpy;
        var Symbol ret;

        do Eval.pushContext(func, argv);
        let cpy = LibSym.copyList(func.data());
        let ret = Exec.cmdlin(cpy);
        do Eval.dropContext();
        do func.dispose();
        do cpy.dispose();

        return ret;
    }


    function Symbol block(Collection cmdlist) {
        var Symbol cmdlin;

        while (cmdlist.length() > 1) {
            let cmdlin = cmdlist.pop();
            do Exec.cmdlin(cmdlin.data());
            do cmdlin.dispose();
        }

        let cmdlin = cmdlist.pop();
        do cmdlist.dispose();

        let cmdlist = cmdlin.data();
        do cmdlin.dispose();

        return Exec.arglist(cmdlist);
    }


    function void doAssign(Collection argv) {
        var String name;
        var Symbol arg;

        let arg = argv.pop();

        if (arg = null) {
            do LibIO.error("expected ref");
            return;
        }

        if ( (arg.meta()&(INDEX|NAME)) = 0 ) {
            do LibIO.error("won't assign to that");
            return;
        }

        if (arg.meta() = INDEX) {
            do Exec.assignIndex(arg, argv);
            return;
        }

        let name = arg.data();
        do arg.dispose();

        let arg = Eval.arg(argv.pop());

        if (arg = null) {
            do LibIO.error("expected expression");
            return;
        }

        do Eval.install(name, arg.meta(), arg.data());

        do arg.dispose();

        return;
    }


    function void assignIndex(Symbol arg, Collection argv) {
        var Symbol deref, val;

        do arg.setTag(1);
        let deref = Eval.index(arg);

        if (deref = null) {
            do LibIO.error("expected expression");
            do LibSym.destroySym(arg);
            return;
        }

        let val = Eval.arg(argv.pop());

        if (val = null) {
            do LibIO.error("expected expression");
            do LibSym.destroySym(deref);
            do LibSym.destroySym(arg);
            return;
        }

        do deref.setMeta(val.meta());
        do deref.setData(val.data());

        do LibSym.destroySym(arg);
        do LibSym.destroySym(val);

        return;
    }


    function void doFunction(Collection argv) {
        var String name;
        var Symbol arg;

        let arg = argv.pop();

        if (arg = null) {
            do LibIO.error("expected name");
            return;
        }

        if (~(arg.meta() = NAME)) {
            do LibIO.error("expected name");
            do LibSym.destroySym(arg);
            return;
        }

        let name = arg.data();
        do arg.dispose();
        do Eval.install(name, FUNC, LibSym.copyList(argv));
        do LibSym.clearList(argv);

        return;
    }


    function Symbol doLength(Collection argv) {
        var int n;
        var String s;
        var Collection l;
        var Symbol p;

        let p = Eval.arg(argv.pop());

        if (p = null) {
            do LibIO.error("expected iterable");
            return null;
        }

        if (p.meta() = STR) {
            let s = p.data();
            let n = s.length();
        } else { if (p.meta() = LIST) {
            let l = p.data();
            let n = l.length();
        } else {
            do LibIO.error("expected iterable");
        }}

        do LibSym.destroySym(p);

        return Symbol.new(null, INT, n);
    }


    function void doIf(Collection argv) {
        var Collection elsev;
        var Symbol arg;

        let arg = Eval.arg(argv.pop());
        let elsev = Exec.elsev(argv);

        if (arg.data() = 0) {
            if (~(elsev = null)) {
                do Exec.cmdlin(elsev);
            }
            do LibSym.clearList(argv);
        } else {
            do Exec.cmdlin(argv);
            do LibSym.clearList(elsev);
        }

        do LibSym.destroySym(arg);

        return;
    }


    function Collection elsev(Collection argv) {
        var int a;
        var int nif;
        var Symbol arg;

        let nif = 0;

        let a = 0;
        while (a < argv.length()) {
            let arg = argv.nth(a);
            if (arg.meta() = NAME) {
                if (Str.eq(ELSES, arg.data())) {
                    if (nif = 0) {
                        return Exec.elseVector(argv, a);
                    } else { if (nif < 0) {
                        do LibIO.error("unexpected 'ELSE'");
                        return null;
                    } else {
                        let nif = nif - 1;
                    }}
                } else { if (Str.eq(IFS, arg.data())) {
                    let nif = nif + 1;
                }}
            }
            let a = a + 1;
        }

        return null;
    }


    function Collection elseVector(Collection argv, int a) {
        var Collection elsev;

        let elsev = Collection.new();
        while ( argv.length() > (a+1) ) {
            do elsev.append(argv.remove(a+1));
        }

        do LibSym.destroySym(argv.remove(a));

        return elsev;
    }


    function void doRepeat(Collection argv) {
        var int i;
        var Symbol arg;

        let arg = Eval.arg(argv.pop());

        if (arg = null) {
            do LibIO.error("expected integer");
            return;
        }

        if ( (arg.meta()=CMD) & (arg.data()=IF) ) {
            do arg.dispose();
            do Exec.doRepeatIf(argv);
            return;
        }

        if (arg.meta() = LIST) {
            do Exec.doRepeatList(arg, argv);
            return;
        }

        if (~(arg.meta() = INT)) {
            do LibIO.error("won't repeat that");
            do LibSym.destroySym(arg);
            return;
        }

        let i = arg.data();
        do arg.dispose();

        if (i < 0) {
            do LibIO.error("won't repeat that");
            return;
        }

        while (i > 0) {
            do Exec.cmdlin(LibSym.copyList(argv));
            let i = i - 1;
        }

        do LibSym.clearList(argv);

        return;
    }


    function void doRepeatIf(Collection argv) {
        var Symbol arg;

        let arg = argv.pop();

        while (~(Eval.condition(arg) = 0)) {
            do Exec.cmdlin(LibSym.copyList(argv));
        }

        do LibSym.clearList(argv);
        do LibSym.destroySym(arg);

        return;
    }


    function void doRepeatList(Collection list, Collection argv) {
        var int i;
        var String name;
        var Symbol arg;

        let arg = argv.pop();

        if (arg = null) {
            do LibIO.error("expected name");
            return;
        }

        if (~(arg.meta() = NAME)) {
            do LibIO.error("expected name");
            do LibSym.destroySym(arg);
            return;
        }

        let name = arg.data();
        do arg.dispose();

        let i = 0;
        while (i < list.length()) {
            let arg = list.nth(i);
            do Eval.install(name, arg.meta(), arg.data());
            do Exec.cmdlin(LibSym.copyList(argv));
            let i = i + 1;
        }

        do LibSym.clearList(argv);

        return;
    }


    function void doQuit(Symbol arg) {
        do Main.stop();  /* syscall! */
        return;
    }

}
