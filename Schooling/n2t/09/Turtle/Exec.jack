// Site use of the "meta" namespace is bit[0] to classify executables.

class Exec {

    static int BIN, BLOCK, CMD, CMDLIN, EXE, FUNC, INT, LIST, SITE, STR, NAME,
        INDEX, LSP;
    static int ASSIGN, FUNCTION, HELP, IF, LENGTH, REPEAT, QUIT;
    static String IFS, ELSES;

    static Collection nestedlistkludge;


    function void init() {

        let IFS = "IF";
        let ELSES = "ELSE";

        let BIN = LibSym.BIN();
        let BLOCK = LibSym.BLOCK();
        let CMD = LibSym.CMD();
        let CMDLIN = LibSym.CMDLIN();
        let EXE = 1;  /* magic number! */
        let FUNC = LibSym.FUNC();
        let INDEX = LibSym.INDEX();
        let INT = LibSym.INT();
        let LIST = LibSym.LIST();
        let LSP = LibSym.LSP();
        let NAME = LibSym.NAME();
        let SITE = ~LibSym.SITE() | EXE;
        let STR = LibSym.STR();

        let ASSIGN   = 0;
        let FUNCTION = 1;
        let HELP     = 2;
        let IF       = 3;
        let LENGTH   = 4;
        let REPEAT   = 5;
        let QUIT     = 6;

do Eval.install("MC",CMD,128);  // ##DB##

        do Eval.install("ASSIGN", CMD, ASSIGN);
        do Eval.install("FUNCTION", CMD, FUNCTION);
        do Eval.install("HELP", CMD, HELP);
        do Eval.install("IF", CMD, IF);
        do Eval.install("LENGTH", CMD, LENGTH);
        do Eval.install("REPEAT", CMD, REPEAT);
        do Eval.install("QUIT", CMD, QUIT);

        let nestedlistkludge = Collection.new();

        return;
    }


    function void kill() {
        do IFS.dispose();
        do ELSES.dispose();
        do LibSym.eradicateList(nestedlistkludge);
        return;
    }


    function void enqueue(Symbol sym) {
        do LibIO.put(LibSym.format(sym));
        return;
    }


    function void next() {
        var Collection argv;

        let argv = Parse.next();

        if ( LibIO.err() | (argv.length()=0) ) {
            do LibSym.destroyList(argv);
            return;
        }

        do Exec.cmdlin(argv);
        do argv.dispose();
        do LibIO.fixCanvas();
        do LibSym.clearList(nestedlistkludge);

        return;
    }


    function void cmdlin(Collection argv) {
        var Symbol ret;

        let ret = Exec.arglist(argv);
        if (~LibIO.err()) {
            do Exec.enqueue(ret);
        }
        do LibSym.destroySym(ret);

        return;
    }


    function Symbol arglist(Collection argv) {
        var Symbol ret;

        if (argv = null) {
            return null;
        }

        let ret = Exec.arg(argv);
        while (argv.length() > 0) {
            if (LibIO.err()) {
                do LibSym.clearList(argv);
                do LibSym.destroySym(ret);
                return null;
            }
            do Exec.enqueue(ret);
            do LibSym.destroySym(ret);
            let ret = Exec.arg(argv);
        }

        return ret;
    }


    function Symbol arg(Collection argv) {
        var Symbol arg;

        let arg = Eval.arg(argv.pop());

        if (arg = null) {
            return null;
        }

        if ( (arg.meta()&EXE) = EXE ) {
            return Exec.executable(arg, argv);
        }

        return arg;
    }


    function Symbol executable(Symbol arg, Collection argv) {
        var int cmd, type;

        let type = arg.meta();

        if (type = FUNC) {
            return Exec.call(arg, argv);
        }

        let cmd = arg.data();

        do arg.dispose();

if (cmd=128) {return Main.mc();}  // ##DB##

        if (type = BIN) { return Bin.exec(cmd, argv);     }
        if (type = CMD) { return Exec.cmd(cmd, argv);     }
        if (type = LSP) { return List.process(cmd, argv); }

        return null;
    }


    function Symbol call(Symbol func, Collection argv) {
        var Collection cmdlin;
        var Symbol ret;

        let cmdlin = LibSym.copyList(func.data());
        if (cmdlin = null) {
            return null;
        }

        do Eval.pushContext(func, LibSym.copyList(argv));
        do LibSym.clearList(argv);

        let ret = Exec.arglist(cmdlin);

        do Eval.dropContext();
        do LibSym.destroyList(cmdlin);

        return ret;
    }


    function Symbol cmd(int cmd, Collection argv) {

        if (cmd = ASSIGN)   { return Exec.doAssign(argv);   }
        if (cmd = FUNCTION) { return Exec.doFunction(argv); }
        if (cmd = HELP)     { return Exec.doHelp();         }
        if (cmd = IF)       { return Exec.doIf(argv);       }
        if (cmd = LENGTH)   { return Exec.doLength(argv);   }
        if (cmd = REPEAT)   { return Exec.doRepeat(argv);   }
        if (cmd = QUIT)     { return Exec.doQuit();         }

        return null;
    }


    function Symbol block(Collection cmdlist) {
        var Collection argv;
        var Symbol cmdlin, ret;

        while (cmdlist.length() > 1) {
            let cmdlin = cmdlist.pop();
            let argv = cmdlin.data();
            do cmdlin.dispose();
            do Exec.cmdlin(argv);
            do argv.dispose();
        }

        let cmdlin = cmdlist.pop();
        do cmdlist.dispose();

        if (cmdlin = null) {
            return null;
        }

        let argv = cmdlin.data();
        do cmdlin.dispose();

        let ret = Exec.arglist(argv);
        do argv.dispose();

        return ret;
    }


    function void doAssign(Collection argv) {
        var String name;
        var Symbol arg;

        let arg = argv.pop();

        if (arg = null) {
            do LibIO.error("expected ref");
            return;
        }

        if ( (arg.meta()&(INDEX|NAME)) = 0 ) {
            do LibIO.error("won't assign to that");
            return;
        }

        if (arg.meta() = INDEX) {
            do Exec.assignIndex(arg, argv);
            return;
        }

        let name = arg.data();
        do arg.dispose();

        let arg = Eval.arg(argv.pop());

        if (arg = null) {
            do LibIO.error("expected expression");
            return;
        }

        do Eval.install(name, arg.meta(), arg.data());

        do arg.dispose();

        return;
    }


    function void assignIndex(Symbol arg, Collection argv) {
        var int i;
        var Collection index, list;
        var Symbol deref, indexp, listp, val;

        let index = arg.data();
        do arg.dispose();

        let listp = Eval.arg(index.pop());

        if (~(listp.meta() = LIST)) {
            do LibIO.error("expected list");
            do LibSym.destroyList(index);
            do LibSym.destroySym(listp);
            return;
        }

        let indexp = Eval.arg(index.pop());
        do index.dispose();

        if (~(indexp.meta() = INT)) {
            do LibIO.error("expected integer");
            do LibSym.destroySym(indexp);
            do LibSym.destroySym(listp);
            return;
        }

        let list = listp.data();
        let i = indexp.data();
        do indexp.dispose();

        if (~(i < list.length())) {
            do LibIO.error("invalid index");
            do LibSym.destroySym(listp);
            return;
        }

        let val = Eval.arg(argv.pop());

        if (val = null) {
            do LibIO.error("expected expression");
            do LibSym.destroySym(listp);
            return;
        }

        do LibSym.destroySym(list.nth(i));
        do LibSym.tagSym(val);
        do list.setnth(i, val);
        do LibSym.destroySym(listp);

        return;
    }


    function Symbol doFunction(Collection argv) {
        var String name;
        var Symbol arg;

        let arg = argv.pop();

        if (arg = null) {  // nop
            return Symbol.new(null, FUNC, Collection.new());
        }

        if (arg.meta() = NAME) {
            let name = arg.data();
            do arg.dispose();
            do Eval.install(name, FUNC, LibSym.copyList(argv));
            do LibSym.clearList(argv);
            return null;
        }

        do argv.push(arg);
        let arg = Symbol.new(null, FUNC, LibSym.copyList(argv));
        do LibSym.clearList(argv);

        return arg;
    }


    function void doHelp() {  // todo: this better
        var String s;

        let s = "APPEND <list> <expression>";
        do LibIO.echo(s);
        do s.dispose();
        let s = "APPLY <list> <function>";
        do LibIO.echo(s);
        do s.dispose();
        let s = "CLEARLIST <list>";
        do LibIO.echo(s);
        do s.dispose();
        let s = "COPY <list>";
        do LibIO.echo(s);
        do s.dispose();
        let s = "EXTEND <list>";
        do LibIO.echo(s);
        do s.dispose();
        let s = "LENGTH <list|string>";
        do LibIO.echo(s);
        do s.dispose();
        let s = "CLEAR";
        do LibIO.echo(s);
        do s.dispose();
        let s = "DIR";
        do LibIO.echo(s);
        do s.dispose();
        let s = "FORWARD <integer expession>";
        do LibIO.echo(s);
        do s.dispose();
        let s = "PENDOWN";
        do LibIO.echo(s);
        do s.dispose();
        let s = "PENUP";
        do LibIO.echo(s);
        do s.dispose();
        let s = "POSX";
        do LibIO.echo(s);
        do s.dispose();
        let s = "POSY";
        do LibIO.echo(s);
        do s.dispose();
        let s = "TURNLEFT <integer expession>";
        do LibIO.echo(s);
        do s.dispose();
        let s = "TURNRIGHT <integer expession>";
        do LibIO.echo(s);
        do s.dispose();
        let s = "FUNCTION <name> <cmdlin>";
        do LibIO.echo(s);
        do s.dispose();
        let s = "HELP";
        do LibIO.echo(s);
        do s.dispose();
        let s = "IF <condition> <cmdlin>";
        do LibIO.echo(s);
        do s.dispose();
        let s = "PRINT <string>";
        do LibIO.echo(s);
        do s.dispose();
        let s = "REPEAT [IF] <expression|list name> <cmdlin>";
        do LibIO.echo(s);
        do s.dispose();
        let s = "QUIT";
        do LibIO.echo(s);
        do s.dispose();

        return;
    }


    function Symbol doIf(Collection argv) {
        var int c;
        var Collection elsev;
        var Symbol p;

        if (argv.length() < 2) {
            do LibIO.error("expected expression");
            do LibIO.error("and command line");
            return null;
        }

        let p = argv.pop();
        let c = Eval.condition(p);
        do LibSym.destroySym(p);
        let elsev = Exec.elsev(argv);

        if (c = 0) {
            do LibSym.clearList(argv);
            if (elsev = null) {
                let p = null;
            } else {
                let p = Exec.arglist(elsev);
            }
        } else {
            let p = Exec.arglist(argv);
        }

        do LibSym.destroyList(elsev);

        return p;
    }


    function Collection elsev(Collection argv) {
        var int a;
        var int nif;
        var Symbol arg;

        if (argv.length() < 2) {
            return null;
        }

        let nif = 0;

        let a = 1;
        while (a < argv.length()) {
            let arg = argv.nth(a);
            if (arg.meta() = NAME) {
                if (Str.eq(ELSES, arg.data())) {
                    if (nif = 0) {
                        return Exec.elseVector(argv, a);
                    } else { if (nif < 0) {
                        do LibIO.error("unexpected 'ELSE'");
                        return null;
                    } else {
                        let nif = nif - 1;
                    }}
                } else { if (Str.eq(IFS, arg.data())) {
                    let nif = nif + 1;
                }}
            }
            let a = a + 1;
        }

        return null;
    }


    function Collection elseVector(Collection argv, int a) {
        var Collection elsev;

        let a = a + 1;
        let elsev = Collection.new();
        while (argv.length() > a) {
            do elsev.append(argv.remove(a));
        }

        do LibSym.destroySym(argv.remove(a-1));

        return elsev;
    }


    function Symbol doLength(Collection argv) {
        var int n;
        var String s;
        var Collection l;
        var Symbol p;

        let p = Eval.arg(argv.pop());

        if (p = null) {
            do LibIO.error("expected iterable");
            return null;
        }

        if (p.meta() = STR) {
            let s = p.data();
            let n = s.length();
        } else { if (p.meta() = LIST) {
            let l = p.data();
            let n = l.length();
        } else {
            do LibIO.error("expected iterable");
        }}

        do LibSym.destroySym(p);

        return Symbol.new(null, INT, n);
    }


    function void doRepeat(Collection argv) {
        var int i;
        var Collection argvc;
        var Symbol arg;

        let arg = Eval.arg(argv.pop());

        if (arg = null) {
            do LibIO.error("expected expression");
            return;
        }

        if ( (arg.meta()=CMD) & (arg.data()=IF) ) {
            do arg.dispose();
            do Exec.doRepeatIf(argv);
            return;
        }

        if (arg.meta() = LIST) {
            do Exec.doRepeatList(arg, argv);
            return;
        }

        if (~(arg.meta() = INT)) {
            do LibIO.error("won't repeat that");
            do LibSym.destroySym(arg);
            return;
        }

        let i = arg.data();
        do arg.dispose();

        if (i < 0) {
            do LibIO.error("won't repeat that");
            return;
        }

        while (i > 0) {
            let argvc = LibSym.copyList(argv);
            do Exec.cmdlin(argvc);
            do argvc.dispose();
            let i = i - 1;
        }

        do LibSym.clearList(argv);

        return;
    }


    function void doRepeatIf(Collection argv) {
        var Collection argvc;
        var Symbol arg;

        let arg = argv.pop();

        while (Eval.condition(arg)) {
            let argvc = LibSym.copyList(argv);
            do Exec.cmdlin(argvc);
            do argvc.dispose();
        }

        do LibSym.destroySym(arg);
        do LibSym.clearList(argv);

        return;
    }


    function void doRepeatList(Symbol listp, Collection argv) {
        var int i;
        var String name;
        var Collection argvc, l;
        var Symbol arg;

        let l = listp.data();

        let arg = argv.pop();

        if (arg = null) {
            do LibIO.error("expected name");
            do LibSym.destroySym(listp);
            return;
        }

        if (~(arg.meta() = NAME)) {
            do LibIO.error("expected name");
            do LibSym.destroySym(listp);
            do LibSym.destroySym(arg);
            return;
        }

        let name = arg.data();
        do arg.dispose();

        let i = 0;
        while (i < l.length()) {
            let arg = l.nth(i);
            do Eval.install(Str.dup(name), arg.meta(), arg.data());
            let argvc = LibSym.copyList(argv);
            do Exec.cmdlin(argvc);
            do argvc.dispose();
            let i = i + 1;
        }

        do LibSym.destroySym(listp);
        do LibSym.clearList(argv);
        do name.dispose();

        return;
    }


    function void doQuit() {
        do Main.stop();  /* "syscall"! */
        return;
    }


function void nestedlistkludge(Symbol p){do nestedlistkludge.append(p);return;}
}
