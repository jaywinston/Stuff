class Exec {

    static int BIN, BLOCK, CMD, CMDLIN, FUNC, INT, LIST, STR;
    static int ASSIGN, FUNCTION, IF, REPEAT, QUIT;
    //static Array FARGV;
    //static String ARGVFS;
    static String IFS, ELSES;


    function void init() {

        //let FARGV = Array.new(1);
        //let ARGVFS = "%D";
        let IFS = "IF";
        let ELSES = "ELSE";

        let BIN = LibSym.BIN();
        let BLOCK = LibSym.BLOCK();
        let CMD = LibSym.CMD();
        let CMDLIN = LibSym.CMDLIN();
        let FUNC = LibSym.FUNC();
        let INT = LibSym.INT();
        let LIST = LibSym.LIST();
        let STR = LibSym.STR();

        let ASSIGN   = 1;
        let FUNCTION = 2;
        let IF       = 3;
        let REPEAT   = 4;
        let QUIT     = 5;

        do Eval.install("MV", CMD,128);  // ##DB##

        do Eval.install("ASSIGN", CMD, ASSIGN);
        do Eval.install("FUNCTION", CMD, FUNCTION);
        do Eval.install("IF", CMD, IF);
        do Eval.install("REPEAT", CMD, REPEAT);
        do Eval.install("QUIT", CMD, QUIT);

        return;
    }


    function void kill() {
        do FARGV.dispose();
        do ARGVFS.dispose();
        do IFS.dispose();
        do ELSES.dispose();
        return;
    }


    function Symbol cmdlin(Collection argv) {
        var Symbol arg, ret;

        let arg = argv.pop();

        if (arg = null) {
            return null;
        }

        do Eval.arg(arg);

        if (arg.meta() = BIN) {
            return Bin.exec(arg, argv);
        }

        if (arg.meta() = CMD) {
            return Exec.cmd(arg, argv);
        }

        if (arg.meta() = FUNC) {
            return Exec.call(arg, argv);
        }

        return arg;
    }


    function Symbol cmd(Symbol arg, Collection argv) {
        var int cmd;

        let cmd = arg.data();

        do arg.dispose();

        if (cmd = ASSIGN)          { return Exec.doAssign(argv);   }
        else { if (cmd = FUNCTION) { return Exec.doFunction(argv); }
        else { if (cmd = IF)       { return Exec.doIf(argv);       }
        else { if (cmd = REPEAT)   { return Exec.doRepeat(argv);   }
        else { if (cmd = QUIT)     { return Exec.doQuit(argv);     }
        }}}}

        if (cmd=128) {do DB.mv();}  // ##DB##

        return null;
    }


    function Symbol call(Symbol arg, Collection argv) {
        var int fargi;
        var Array fargv;
        var String argname, fstr;
        var Symbol arg, ret;

        do Eval.pushScope(3, argv);
/*
        let fargi = 0;

        let arg = argv.next();
        while (~(arg = null)) {
            let fargi = fargi + 1;
            let FARGV[0] = fargi;
            let argname = Str.format(FARGVS, FARGV);
            do Eval.arg(arg);
            do Eval.install(argname, arg.meta(), arg.data());
            do argname.dispose();
            let arg = arg.next();
        }

*/
        let ret = Exec.cmdlin(arg.data());
        do Eval.dropScope();
        do LibSym.destroySym(arg);

        return ret;
    }


    function Symbol block(Symbol block) {
        var Collection cmdlist;
        var Symbol ret;

        if (block = null) {
            return null;
        }

        if (block.data() = null) {
            return null;
        }

        let cmdlist = block.data();
        do block.dispose();

        let ret = Exec.cmdlin(cmdlist.pop());
        while (cmdlist.length() > 0) {
            do LibSym.destroySym(ret);
            let ret = Exec.cmdlin(cmdlist.pop());
        }

        do cmdlist.dispose();

        return ret;
    }


    function void doAssign(Collection argv) {
        var String name;
        var Symbol arg;

        let arg = argv.pop();
        let name = arg.tag();
        do arg.dispose();
        let arg = Eval.arg(argv.pop());
        do Eval.install(name, arg.meta(), arg.data());
        do arg.dispose();

        return;
    }


    function void doFunction(Collection argv) {
        var Symbol arg;

        let arg = argv.pop();

        if (arg = null) {
            do LibIO.error("no function name");
            return;
        }

        do Eval.install(arg.tag(), FUNC, LibSym.copyList(argv));

        do arg.dispose();
        while (argv.length() > 0) {
            do LibSym.destroySym(argv.pop());
        }

        return;
    }


    function void doIf(Collection argv) {
        var Symbol elsep;

        let elsep = Exec.elsePointer(arg);

        do Eval.arg(arg);

        if (~(arg.data() = 0)) {
            do Exec.cmdlin(arg.next());
        } else { if (~(elsep = null)) {
            do Exec.cmdlin(elsep.next());
        }}

        return;
    }


    function Symbol elsePointer(Symbol argv) {
        var int nif;
        var Symbol argp;

        let argp = argv.next();
        while (~(argp = null)) {
            if (Str.eq(ELSES, argp.tag())) {
                if (nif = 0) {
                    return argp;
                } else {
                    let nif = nif - 1;
                }
            } else { if (Str.eq(IFS, argp.tag())) {
                let nif = nif + 1;
            }}
            let argp = argp.next();
        }

        return null;
    }


    function void doRepeat(Symbol arg) {
        var int i;
        var Symbol cmdp;

        do Eval.arg(arg);

        if ( (arg.meta()=CMD) & (arg.data()=IF) ) {
            do Exec.doRepeatIf(arg.next());
            return;
        }

        /* todo: type check */

        let i = arg.data();
        while (i > 0) {
            let cmdp = LibSym.copyList(arg.next());
            do Exec.cmdlin(cmdp);
            do LibSym.destroyList(cmdp);
            let i = i - 1;
        }

        return;
    }


    function void doRepeatIf(Symbol arg) {
        var int condition;
        var Symbol cmdp, condp;

        let condp = Eval.arg(LibSym.copySym(arg));
        let condition = condp.data();
        do LibSym.destroyList(condp);
        while (~(condition = 0)) {
            let cmdp = LibSym.copyList(arg.next());
            do Exec.cmdlin(cmdp);
            do LibSym.destroyList(cmdp);
            let condp = Eval.arg(LibSym.copySym(arg));
            let condition = condp.data();
            do LibSym.destroyList(condp);
        }

        return;
    }


    /* todo: fix this */
    function Symbol doQuit(Symbol arg) {
        return Symbol.new(null, CMD, QUIT);
    }


    function int QUIT() {
        return QUIT;
    }

}
