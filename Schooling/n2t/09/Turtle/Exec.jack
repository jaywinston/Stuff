class Exec {

    static int bottom, left, right, top;
    static int CMD, CMDLIN, FUNC, INT, STR, TTL;
    static int ASSIGN, BLOCK, CLEAR, DISPOSE, FORWARD, FUNCTION, IF,
        PENDOWN, PENUP, POSX, POSY, PRINT, REPEAT, TURNLEFT, TURNRIGHT,
        TURTLE, QUIT;
    static TextBox tb;
    static Symbol turtles;
    static Turtle t;


    function void init(int i, int j, int h, int w) {

        let tb = TextBox.new(i, j, h, w);
        let top = i * 11;
        let left = j * 8;
        let bottom = (i+h) * 11;
        let right = (j+w) * 8;
        let t = Exec.defaultTurtle();
        let turtles = Symbol.new(null, null, t);

        do Exec.initKWs();

        return;
    }


    function Turtle defaultTurtle() {
        return Turtle.new(left + ((right-left)/2),
                          top + ((bottom-top)/2),
                          90, top, left, bottom, right);
    }


    function void initKWs() {
        var int i;

        let BLOCK   = LibSym.BLOCK();
        let CMD     = LibSym.CMD();
        let CMDLIN  = LibSym.CMDLIN();
        let FUNC    = LibSym.FUNC();
        let INT     = LibSym.INT();
        let STR     = LibSym.STR();
        let TTL     = LibSym.TTL();

        let ASSIGN    =  1;
        let CLEAR     =  2;
        let DISPOSE   =  3;
        let FORWARD   =  4;
        let FUNCTION  =  5;
        let IF        =  6;
        let PENDOWN   =  7;
        let PENUP     =  8;
        let POSX      =  9;
        let POSY      = 10;
        let PRINT     = 11;
        let REPEAT    = 12;
        let TURNLEFT  = 13;
        let TURNRIGHT = 14;
        let TURTLE    = 15;
        let QUIT      = 16;

        do Exec.installKW("MV",128);  // ##DB##

        do Exec.installKW("=",         ASSIGN);
        do Exec.installKW("CLEAR",     CLEAR);
        do Exec.installKW("DISPOSE",   DISPOSE);
        do Exec.installKW("FORWARD",   FORWARD);
        do Exec.installKW("FUNCTION",  FUNCTION);
        do Exec.installKW("IF",        IF);
        do Exec.installKW("PENDOWN",   PENDOWN);
        do Exec.installKW("PENUP",     PENUP);
        do Exec.installKW("POSX",      POSX);
        do Exec.installKW("POSY",      POSY);
        do Exec.installKW("PRINT",     PRINT);
        do Exec.installKW("REPEAT",    REPEAT);
        do Exec.installKW("TURNLEFT",  TURNLEFT);
        do Exec.installKW("TURNRIGHT", TURNRIGHT);
        do Exec.installKW("TURTLE",    TURTLE);
        do Exec.installKW("QUIT",      QUIT);

        return;
    }


    function void installKW(String name, int val) {
        do Eval.install(name, CMD, val);
        do name.dispose();
        return;
    }


    function void clear() {
        var Turtle tt;

        let tt = turtles.data();
        do tt.dispose();
        do tb.clear();
        do turtles.setData(Exec.defaultTurtle());

        return;
    }


    function void try(Symbol argv) {
        var Symbol ret;

        let ret = Exec.exec(argv);

        if (Error.isSet()) {
            while (Error.isSet()) {
                do IOBox.echo(Error.message());
            }
        } else {
            do Exec.echo(ret);
        }

        return;
    }


    function Symbol exec(Symbol argv) {
        var int cmd;
        var Turtle tt;

        if (argv = null) {
            return null;
        }

        if (argv.meta() = BLOCK)  { return Exec.block(argv);   }
        if (argv.meta() = CMDLIN) { return Exec.exec(argv.data()); }

        do Eval.arg(argv);

        if (argv.meta() = TTL) {
            let tt = t;
            let t = argv.data();
            do Exec.try(argv.next());
            let t = tt;
            do argv.dispose();
            return null;
        }

        if   (argv.meta() = FUNC) { return Exec.call(argv);             }
        if (~(argv.meta() = CMD)) { return argv;                        }

        let cmd = argv.data();

        if (cmd = TURTLE) { return Exec.newTurtle(argv.next());         }
        if (cmd = POSX)   { return Exec.posx(argv);                     }
        if (cmd = POSY)   { return Exec.posy(argv);                     }

        if (cmd = ASSIGN)           { do Exec.doAssign(argv.next());    }
        else { if (cmd = CLEAR)     { do Exec.doClear(argv.next());     }
        else { if (cmd = DISPOSE)   { do Exec.doDispose(argv.next());   }
        else { if (cmd = FORWARD)   { do Exec.doForward(argv.next());   }
        else { if (cmd = FUNCTION)  { do Exec.doFunction(argv.next());  }
        else { if (cmd = IF)        { do Exec.doIf(argv.next());        }
        else { if (cmd = PENDOWN)   { do Exec.doPendown(argv.next());   }
        else { if (cmd = PENUP)     { do Exec.doPenup(argv.next());     }
        else { if (cmd = PRINT)     { do Exec.doPrint(argv.next());     }
        else { if (cmd = REPEAT)    { do Exec.doRepeat(argv.next());    }
        else { if (cmd = TURNLEFT)  { do Exec.doTurnleft(argv.next());  }
        else { if (cmd = TURNRIGHT) { do Exec.doTurnright(argv.next()); }
        else { if (cmd = QUIT)      { do Exec.doQuit(argv.next());      }
        }}}}}}}}}}}}

        if (cmd=128) {do DB.mv();}  // ##DB##

        return null;
    }


    function Symbol call(Symbol argv) {
        var int n;
        var Array fargv;
        var String argname, fstr;
        var Symbol arg, ret;

        do Eval.pushScope(3);

        let fargv = Array.new(1);
        let fstr = "$%D";
        let n = 0;

        let arg = argv.next();
        while (~(arg = null)) {
            let n = n + 1;
            let fargv[0] = n;
            let argname = Str.format(fstr, fargv);
            do Eval.arg(arg);
            do Eval.install(argname, arg.meta(), arg.data());
            do argname.dispose();
            let arg = arg.next();
        }

        let ret = Exec.exec(argv.data());

        do Eval.dropScope();
        do fargv.dispose();
        do fstr.dispose();

        return ret;
    }


    function Symbol block(Symbol block) {
        var Symbol cmdlin;

        if (block = null) {
            return null;
        }

        let cmdlin = block.data();
        while (~(cmdlin.next() = null)) {
            do Exec.try(cmdlin.data());
            let cmdlin = cmdlin.next();
        }

        return Exec.exec(cmdlin.data());
    }


    function Symbol newTurtle(Symbol argv) {
        var int d, x, y;
        var Symbol p;

        if (argv = null) {
            let p = Symbol.new(null, TTL, Exec.defaultTurtle());
            do turtles.append(Symbol.new(null, TTL, p.data()));
            return p;
        }

        do Eval.arg(argv);
        let x = argv.data() + left;
        let argv = argv.next();

        do Eval.arg(argv);
        let y = argv.data() + top;
        let argv = argv.next();

        do Eval.arg(argv);
        let d = argv.data();

        let p = Symbol.new(null, TTL,
                           Turtle.new(x, y, d, top, left, bottom, right));

        do turtles.append(p); // ##DB##Symbol.new(null, TTL, p.data()));

        do Exec.try(argv.next());

        return p;
    }


    function void doAssign(Symbol arg) {
        var Symbol val;

        let val = Eval.arg(arg.next());
        do Eval.install(arg.tag(), val.meta(), val.data());
        do Exec.try(val.next());

        return;
    }


    function void doClear(Symbol arg) {

        do Exec.clear();
        do Exec.refreshTurtles();
        do Exec.try(arg);

        return;
    }


    function void refreshTurtles() {
        var Symbol tp;
        var Turtle tt;

        let tp = turtles.next();
        while (~(tp = null)) {
            let tt = tp.data();
            do tt.show();
            let tp = tp.next();
        }

        return;
    }


    function void doDispose(Symbol arg) {
        var boolean continue;
        var Symbol p;
        var Symbol np, pp, tp;  // next, previous, turtle pointers
        var Turtle tt;

        if (arg = null) {
            /* error */
            return;
        }

        if (turtles.next() = null) {
            return;
        }

        do Eval.arg(arg);

        if (arg.data() = null) {
            /* error */
            return;
        }

        let tp = null;

        let p = turtles;
        while (~(p = null)) {
            let np = p.next();
            if (~(np = null)) {
                if (np.data() = arg.data()) {
                    let tp = np;
                    let pp = p;
                }
            }
            let p = p.next();
        }

        if (tp = null) {
            return;
        }

        let np = tp.next();
        do pp.setNext(np);
        //do tp.dispose();

        let tt = arg.data();
        do tt.dispose();
        do Eval.install(arg.name(), null, null);

        do Exec.try(arg.next());

        return;
    }


    function void doForward(Symbol arg) {
        var int errno;  // ##TEMP##

        do Eval.arg(arg);

        let errno = t.forward(arg.data());  // ##TEMP##

        if (errno = 1) {
            do Error.send("won't go backwards");  // ##DB##
            do Error.set(1);  // won't go backwards
        }

        if (errno = 2) {
            do Error.send("target beyond boundary");  // ##DB##
            do Error.set(1);  // target beyond boundary
        }

        /* ##DB## do Error.set(t.forward(arg.data())); will be this */

        do Exec.try(arg.next());

        return;
    }


    function void doFunction(Symbol arg) {

        if (arg = null) {
            do Error.send("no function name");  // ##DB##
            do Error.set(1);  // no function name
            return;
        }

        do Eval.install(arg.name(), FUNC, LibSym.copyList(arg.next()));

        return;
    }


    function void doIf(Symbol arg) {
        var Symbol elsep;

        let elsep = Exec.elsePointer(arg);

        do Eval.arg(arg);

        if (~(arg.data() = 0)) {
            do Exec.try(arg.next());
        } else { if (~(elsep = null)) {
            do Exec.try(elsep.next());
        }}

        return;
    }


    function Symbol elsePointer(Symbol argv) {
        var int ifc;
        var String IFS, ELSES;
        var Symbol argp;

        let IFS = "IF";
        let ELSES = "ELSE";

        let argp = argv.next();
        while (~(argp = null)) {
            if (HashTable.streq(ELSES, argp.name())) {
                if (ifc = 0) {
                    do IF.dispose();
                    do ELSE.dispose();
                    return argp;
                } else {
                    let ifc = ifc - 1;
                }
            } else { if (HashTable.streq(IFS, argp.name())) {
                let ifc = ifc + 1;
            }}
            //let argv = argv.next();
            let argp = argp.next();
        }

        do IFS.dispose();
        do ELSES.dispose();

        return null;
    }


    function void doPendown(Symbol arg) {

        do t.pendown();

        do Exec.try(arg);

        return;
    }


    function void doPenup(Symbol arg) {

        do t.penup();

        do Exec.try(arg);

        return;
    }


    function int posx(Symbol arg) {
        var int x;

        let x = t.x();

        do Exec.try(arg);

        return x;
    }


    function int posy(Symbol arg) {
        var int y;

        let y = t.y();

        do Exec.try(arg);

        return y;
    }


    function void doPrint(Symbol arg) {

        if (tb.set(t.y()/11, (t.x()/8)+1) = 1) {
            do Error.send("illegal cursor coordinate");  // ##DB##
            do Error.set(1);  // illegal cursor coordinate
            return;
        }

        do Eval.arg(arg);

        do Exec.hideAll();
        do tb.puts(arg.data());
        do Exec.showAll();

        do Exec.try(arg.next());

        return;
    }


    function void hideAll() {
        var Symbol tp;
        var Turtle tt;

        let tp = turtles;
        while (~(tp = null)) {
            let tt = tp.data();
            do tt.hide();
            let tp = tp.next();
        }

        return;
    }


    function void showAll() {
        var Symbol tp;
        var Turtle tt;

        let tp = turtles;
        while (~(tp = null)) {
            let tt = tp.data();
            do tt.show();
            let tp = tp.next();
        }

        return;
    }


    function void doRepeat(Symbol arg) {
        var int i;

        do Eval.arg(arg);

        if ( (arg.meta()=CMD) & (arg.data()=IF) ) {
            do Exec.doRepeatIf(arg.next());
            return;
        }

        /* todo: type check */
        /* todo: check not negative */

        let i = arg.data();
        while (i > 0) {
            do Exec.try(arg.next());
            let i = i - 1;
        }

        return;
    }


    function void doRepeatIf(Symbol arg) {
        var int condition;
        var Symbol p;

        let p = Eval.arg(LibSym.copyList(arg));
        let condition = p.data();
        do LibSym.destroyList(p);
        while (~(condition = 0)) {
            do Exec.try(arg.next());
            let p = Eval.arg(LibSym.copyList(arg));
            let condition = p.data();
            do LibSym.destroyList(p);
        }

        return;
    }


    function void doTurnleft(Symbol arg) {

        do Eval.arg(arg);
        do t.turnleft(arg.data());
        do Exec.try(arg.next());

        return;
    }


    function void doTurnright(Symbol arg) {

        do Eval.arg(arg);
        do t.turnright(arg.data());
        do Exec.try(arg.next());

        return;
    }


    function void doQuit(Symbol arg) {
        /* todo: return to main? */
        do Sys.halt();
        return;
    }


    function void echo(Symbol sym) {

        if (sym = null) {
            return;
        }

        if (sym.meta() = STR) {
            do IOBox.echo(sym.data());
        } else { if (sym.meta() = INT) {
            do Exec.echoInt(sym);
        }}

        do Exec.try(sym.next());

        return;
    }


    function void echoInt(Symbol sym) {
        var String s;

        let s = String.new(6);
        do s.setInt(sym.data());
        do IOBox.echo(s);
        do s.dispose();

        return;
    }

}
