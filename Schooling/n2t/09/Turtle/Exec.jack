class Exec {

    static int BIN, BLOCK, CMD, CMDLIN, FUNC, INT, LIST, STR, SYS;
    static int ASSIGN, FUNCTION, IF, REPEAT, QUIT;
    static Array FARGV;
    static String ARGVFS, IFS, ELSES;


    function void init() {

        let FARGV = Array.new(1);
        let FARGVS = "%D";
        let IFS = "IF";
        let ELSES = "ELSE";

        let BIN = LibSym.BIN();
        let BLOCK = LibSym.BLOCK();
        let CMD = LibSym.CMD();
        let CMDLIN = LibSym.CMDLIN();
        let FUNC = LibSym.FUNC();
        let INT = LibSym.INT();
        let LIST = LibSym.LIST();
        let STR = LibSym.STR();
        let SYS = LibSym.SYS();

        let ASSIGN   = 1;
        let FUNCTION = 2;
        let IF       = 3;
        let REPEAT   = 4;
        let QUIT     = 5;

        do Eval.install("MV", CMD,128);  // ##DB##

        do Eval.install("ASSIGN", CMD, ASSIGN);
        do Eval.install("FUNCTION", CMD, FUNCTION);
        do Eval.install("IF", CMD, IF);
        do Eval.install("REPEAT", CMD, REPEAT);
        do Eval.install("QUIT", CMD, QUIT);

        return;
    }


    function void kill() {
        do FARGV.dispose();
        do ARGVFS.dispose();
        do IFS.dispose();
        do ELSES.dispose();
        return;
    }


    function Symbol cmdlin(Collection argv) {
        var int cmd;
        var Symbol arg, ret;

        let arg = argv.pop();

        if (arg = null) {
            return null;
        }

        if (arg.meta() = BLOCK)         { let ret = Exec.block(arg.data());  }
        else { if (arg.meta() = CMDLIN) { let ret = Exec.cmdlin(arg.data()); }}

        do Eval.arg(arg);

        if (arg.meta() = FUNC) { let ret = Exec.call(argv);            }
        if (arg.meta() = BIN)  { let ret = Bin.exec(arg.data(), argv); }
        if (~(arg.meta() = CMD)) { return arg; }

        let cmd = arg.data();

        if (cmd = ASSIGN)           { do Exec.doAssign(argv);    }
        else { if (cmd = FUNCTION)  { do Exec.doFunction(argv);  }
        else { if (cmd = IF)        { do Exec.doIf(argv);        }
        else { if (cmd = REPEAT)    { do Exec.doRepeat(argv);    }
        else { if (cmd = QUIT)      { do Exec.doQuit(argv);      }
        }}}}

        if (cmd=128) {do DB.mv();}  // ##DB##

        do arg.dispose();

        return null;
    }


    function Symbol call(Symbol argv) {
        var int fargi;
        var Array fargv;
        var String argname, fstr;
        var Symbol arg, ret;

        do Eval.pushScope(3);

        let fargi = 0;

        let arg = argv.next();
        while (~(arg = null)) {
            let fargi = fargi + 1;
            let FARGV[0] = fargi;
            let argname = Str.format(FARGVS, FARGV);
            do Eval.arg(arg);
            do Eval.install(argname, arg.meta(), arg.data());
            do argname.dispose();
            let arg = arg.next();
        }

        let ret = Exec.cmdlin(argv.data());

        do Eval.dropScope();

        return ret;
    }


    function Symbol block(Symbol block) {
        var Symbol cmdlin;

        if (block = null) {
            return null;
        }

        if (block.data() = null) {
            return null;
        }

        let cmdlin = block.data();
        while (~(cmdlin.next() = null)) {
            do Exec.cmdlin(cmdlin.data());
            let cmdlin = cmdlin.next();
        }

        return Exec.cmdlin(cmdlin.data());
    }


    function void doAssign(Symbol arg) {
        var Symbol val;

        let val = Eval.arg(arg.next());
        do Eval.install(arg.tag(), val.meta(), val.data());
        do Exec.cmdlin(val.next());

        return;
    }


    function void doFunction(Symbol arg) {

        if (arg = null) {
            do LibIO.error("no function name");
            return;
        }

        do Eval.install(arg.tag(), FUNC, LibSym.copyList(arg.next()));

        return;
    }


    function void doIf(Symbol arg) {
        var Symbol elsep;

        let elsep = Exec.elsePointer(arg);

        do Eval.arg(arg);

        if (~(arg.data() = 0)) {
            do Exec.cmdlin(arg.next());
        } else { if (~(elsep = null)) {
            do Exec.cmdlin(elsep.next());
        }}

        return;
    }


    function Symbol elsePointer(Symbol argv) {
        var int nif;
        var Symbol argp;

        let argp = argv.next();
        while (~(argp = null)) {
            if (Str.eq(ELSES, argp.tag())) {
                if (nif = 0) {
                    return argp;
                } else {
                    let nif = nif - 1;
                }
            } else { if (Str.eq(IFS, argp.tag())) {
                let nif = nif + 1;
            }}
            let argp = argp.next();
        }

        return null;
    }


    function void doRepeat(Symbol arg) {
        var int i;
        var Symbol cmdp;

        do Eval.arg(arg);

        if ( (arg.meta()=CMD) & (arg.data()=IF) ) {
            do Exec.doRepeatIf(arg.next());
            return;
        }

        /* todo: type check */

        let i = arg.data();
        while (i > 0) {
            let cmdp = LibSym.copyList(arg.next());
            do Exec.cmdlin(cmdp);
            do LibSym.destroyList(cmdp);
            let i = i - 1;
        }

        return;
    }


    function void doRepeatIf(Symbol arg) {
        var int condition;
        var Symbol cmdp, condp;

        let condp = Eval.arg(LibSym.copySym(arg));
        let condition = condp.data();
        do LibSym.destroyList(condp);
        while (~(condition = 0)) {
            let cmdp = LibSym.copyList(arg.next());
            do Exec.cmdlin(cmdp);
            do LibSym.destroyList(cmdp);
            let condp = Eval.arg(LibSym.copySym(arg));
            let condition = condp.data();
            do LibSym.destroyList(condp);
        }

        return;
    }


    /* todo: fix this */
    function Symbol doQuit(Symbol arg) {
        return Symbol.new(null, CMD, QUIT);
    }


    function int QUIT() {
        return QUIT;
    }

}
