class Exec {

    static int bottom, left, right, top;
    static TextBox tb;
    static Turtle t;

    static int
        CMD,
        CMDLIN,
        FUNC,
        INT,
        STR,
        SYM,

        ASSIGN,
        BLOCK,
        CLEAR,
        ELSE,
        FORWARD,
        FUNCTION,
        IF,
        PENDOWN,
        PENUP,
        PRINT,
        REPEAT,
        TURNLEFT,
        TURNRIGHT,
        QUIT;


    function void init(int i, int j, int h, int w) {

        let tb = TextBox.new(i, j, h, w);
        let top = i * 11;
        let left = j * 8;
        let bottom = (i + h) * 11;
        let right = (j + w) * 8;

        do Exec.initKWs();
        do Exec.getTurtle();

        return;
    }


    /* intialize key words and internal symbols */
    function void initKWs() {
        var int i;

        let BLOCK  = Symbol.BLOCK();
        let CMD    = Symbol.CMD();
        let CMDLIN = Symbol.CMDLIN();
        let FUNC   = Symbol.FUNC();
        let INT    = Symbol.INT();
        let STR    = Symbol.STR();
        let SYM    = Symbol.SYM();

        let ASSIGN    =  0;
        let CLEAR     =  2;
        let ELSE      =  3;
        let FORWARD   =  4;
        let FUNCTION  =  5;
        let IF        =  6;
        let PENDOWN   =  7;
        let PENUP     =  8;
        let PRINT     =  9;
        let REPEAT    = 10;
        let TURNLEFT  = 11;
        let TURNRIGHT = 12;
        let QUIT      = 13;

        do Eval.installKW("MV",128);  // ##DB##

        do Eval.installKW("=",         ASSIGN);
        do Eval.installKW("CLEAR",     CLEAR);
        do Eval.installKW("ELSE",      ELSE);
        do Eval.installKW("FORWARD",   FORWARD);
        do Eval.installKW("FUNCTION",  FUNCTION);
        do Eval.installKW("IF",        IF);
        do Eval.installKW("PENDOWN",   PENDOWN);
        do Eval.installKW("PENUP",     PENUP);
        do Eval.installKW("PRINT",     PRINT);
        do Eval.installKW("REPEAT",    REPEAT);
        do Eval.installKW("TURNLEFT",  TURNLEFT);
        do Eval.installKW("TURNRIGHT", TURNRIGHT);
        do Eval.installKW("QUIT",      QUIT);

        return;
    }


    function void getTurtle() {
        let t = Turtle.new(left + ((right-left)/2),
                           top + ((bottom-top)/2),
                           90, top, left, bottom, right);
        return;
    }


    function void clear() {
        do t.dispose();
        do tb.clear();
        do Exec.getTurtle();
        return;
    }


    function void try(Symbol argv) {
        var Symbol retval;

        let retval = Exec.exec(argv);

        if (Error.isSet()) {
            while (Error.isSet()) {
                do IOBox.echo(Error.message());
            }
        } else {
            do Exec.echo(retval);
        }

        do Symbol.clear(retval);

        return;
    }


    function Symbol exec(Symbol argv) {
        var int cmd;

        if (argv = null) {
            return null;
        }

        if (argv.type() = FUNC)   { return Exec.call(argv);              }
        if (argv.type() = BLOCK)  { return Exec.execBlock(argv.value()); }
        if (argv.type() = CMDLIN) { return Exec.exec(argv.value());      }

        do Eval.arg(argv);

        if (~(argv.type() = CMD)) {
            return argv;
        }

        let cmd = argv.value();

        if (cmd = ASSIGN)           { do Exec.doAssign(argv.next());    }
        else { if (cmd = CLEAR)     { do Exec.doClear(argv.next());     }
        else { if (cmd = FORWARD)   { do Exec.doForward(argv.next());   }
        else { if (cmd = FUNCTION)  { do Exec.doFunction(argv.next());  }
        else { if (cmd = IF)        { do Exec.doIf(argv.next());        }
        else { if (cmd = PENDOWN)   { do Exec.doPendown(argv.next());   }
        else { if (cmd = PENUP)     { do Exec.doPenup(argv.next());     }
        else { if (cmd = PRINT)     { do Exec.doPrint(argv.next());     }
        else { if (cmd = REPEAT)    { do Exec.doRepeat(argv.next());    }
        else { if (cmd = TURNLEFT)  { do Exec.doTurnleft(argv.next());  }
        else { if (cmd = TURNRIGHT) { do Exec.doTurnright(argv.next()); }
        else { if (cmd = QUIT)      { do Exec.doQuit(argv.next());      }
        }}}}}}}}}}}

        if (cmd=128) {do DB.mv();}  // ##DB##

        do Symbol.clear(argv);

        return null;
    }

    function Symbol call(Symbol argv) {
        var int n;
        var Array farg;
        var String arg, fpres;
        var Symbol p;

        let farg = Array.new(1);
        let fpres = "$%d";
        let n = 0;

        let p = argv.next();
        while (~(p = null)) {
            let n = n + 1;
            let farg[0] = n;
            let arg = Str.format(fpres, farg);
            do Eval.install(arg, p.type(), p.value());
            do arg.dispose();
            let p = p.next();
        }

        let p = Exec.exec(Symbol.copy(argv.value()));

        while (n > 0) {
            let farg[0] = n;
            let arg = Str.format(fpres, farg);
            do Eval.delete(arg);
            do arg.dispose();
            let n = n - 1;
        }

        do Symbol.clear(argv);
        do farg.dispose();
        do fpres.dispose();

        return p;
    }


    function Symbol execBlock(Symbol b) {
        var Symbol p;

        let p = Exec.doBlock(b);
        do Symbol.clear(b);

        return p;
    }


    function Symbol doBlock(Symbol b) {

        if (b = null) {
            return null;
        }

        while (~(b.next() = null)) {
            do Symbol.clear(Exec.exec(b.value()));
            let b = b.next();
        }

        return Exec.exec(b.value());
    }


    function void doAssign(Symbol arg) {
        do Eval.assign(arg.value());
        return;
    }


    function void doClear(Symbol arg) {
        do Exec.clear();
        return;
    }


    function void doForward(Symbol arg) {
        var int errno;  // ##TEMP##

        do Eval.arg(arg);

        let errno = t.forward(arg.value());  // ##TEMP##
        if (errno = 1) {
            do Error.send("won't go backwards");  // ##DB##
            do Error.set(1);  // won't go backwards
        }

        if (errno = 2) {
            do Error.send("target beyond boundary");  // ##DB##
            do Error.set(1);  // target beyond boundary
        }

        /* do Error.set(t.forward(arg.value())); will be this */

        return;
    }


    function void doFunction(Symbol arg) {

        if (arg = null) {
            do Error.send("no function name");  // ##DB##
            do Error.set(1);  // no function name
            return;
        }

        do Eval.install(arg.name(), FUNC, Symbol.copy(arg.next()));

        return;
    }


    function void doIf(Symbol arg) {

        do Eval.arg(arg);
        if (~(arg.value() = 0)) {
            do Exec.try(arg.next());
        }

        return;
    }

    function void doPendown(Symbol arg) {
        do t.pendown();
        return;
    }


    function void doPenup(Symbol arg) {
        do t.penup();
        return;
    }


    function void doPrint(Symbol arg) {

        do t.hide();

        if (tb.set(t.y()/11, (t.x()/8)+1) = 1) {
            do Error.send("illegal cursor coordinate");  // ##DB##
            do Error.set(1);  // illegal cursor coordinate
            return;
        }

        do Eval.arg(arg);
        do tb.puts(arg.value());

        do t.show();

        return;
    }


    function void doRepeat(Symbol arg) {
        var int i;

        do Eval.arg(arg);
        if ( (arg.type()=CMD) & (arg.value()=IF) ) {
            do Exec.doRepeatIf(arg.next());
            return;
        }

        /* todo: type check */

        let i = arg.value();
        while (i > 0) {
            do Exec.try(arg.next());
            let i = i - 1;
        }

        return;
    }


    function void doRepeatIf(Symbol arg) {
        var int condition;
        var Symbol p;

        do Eval.arg(arg);
        let condition = arg.value();
        while (~(condition = 0)) {
            do Exec.try(Symbol.copy(arg.next()));
            let p = Eval.eval(arg.name(), 0);
            let condition = p.value();
            do Symbol.clear(p);
        }

        return;
    }


    function void doTurnleft(Symbol arg) {
        do Eval.arg(arg);
        do t.turnleft(arg.value());
        return;
    }


    function void doTurnright(Symbol arg) {
        do Eval.arg(arg);
        do t.turnright(arg.value());
        return;
    }


    function void doQuit(Symbol arg) {
        do Sys.halt();
        return;
    }


    function void echo(Symbol sym) {
        while (~(sym = null)) {
            if (sym.type() = STR) {
                do IOBox.echo(sym.value());
            } else { if (sym.type() = SYM) {
                //do Exec.echo(sym.value());
            } else { if (sym.type() = INT) {
                do Exec.echoInt(sym);
            }}}
            let sym = sym.next();
        }
        return;
    }


    function void echoInt(Symbol sym) {
        var String s;

        let s = String.new(6);
        do s.setInt(sym.value());
        do IOBox.echo(s);
        do s.dispose();

        return;
    }

}
