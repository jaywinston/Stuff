class IOBox {

    field int BUFSIZ, MAXLEN;
    field int bp, rp;
    field Array LINBUF;
    field TextBox tb;


    constructor IOBox new(int i, int j, int h, int w,
                          int bufferSize, int maxlen) {

        let BUFSIZ = bufferSize;
        let MAXLEN = maxlen;
        let LINBUF = Array.new(BUFSIZ);
        let bp = 0;
        while (bp < BUFSIZ) {
            let LINBUF[bp] = String.new(MAXLEN);  /* for memory diagnostics */
            let bp = bp + 1;
        }
        let bp = 0;
        let tb = TextBox.new(i, j, h, w);

        return this;
    }


    method void dispose() {
        var int i;
        var String s;

        let i = 0;
        while (i < BUFSIZ) {
            let s = LINBUF[i];
            do s.dispose();
            let i = i + 1;
        }
        do LINBUF.dispose();
        do tb.dispose();

        return;
    }


    method String read(String ps) {
        var char c;
        var String s;

        do tb.puts(ps);
        let rp = bp;

        let s = LINBUF[bp];
        do s.dispose();
        let s = String.new(MAXLEN);
        let LINBUF[bp] = s;

        let c = 0;
        while (~(c = 128)) {
            do tb.putc(0);      /* show cursor */
            do tb.backspace();  /* next char overwrites cursor */

            let c = Keyboard.keyPressed();
            while (c = 0) {
                let c = Keyboard.keyPressed();
            }
            do Memory.poke(24576, 0);

            if ( (c>31) & (c<127) ) {
                if (s.length() < MAXLEN) {
                    do s.appendChar(c);
                    do tb.putc(c);
                }
            } else { if ( (c=129) & (s.length()>0) ) {
                do s.eraseLastChar();
                do tb.putc(c);
            } else { if (c = 131) {
                let s = recall(-1);
            } else { if (c = 133) {
                let s = recall(1);
            }}}}
        }

        if (~(rp = bp)) {
            let s = LINBUF[bp];
            do s.dispose();
            let s = LINBUF[rp];
            let LINBUF[bp] = strdup(s);
        }

        if (s.length() > 0) {
            let bp = bp + 1;
            if (bp = BUFSIZ) {
                let bp = 0;
            }
        }

        do Output.printChar(129);   /* erase cursor */
        do tb.newline();

        return s;
    }


    method String recall(int step) {
        var int i;
        var String s;

        /* backspace over current string, overwriting with blanks */
        let s = LINBUF[rp];
        let i = 0;
        while (i < s.length()) {
            do tb.putc(32);
            do tb.backspace();
            do tb.backspace();
            let i = i + 1;
        }

        if (step < 0) {
            let s = negrec(step);
        } else {
            let s = posrec(step);
        }

/* ##TEST##
        if ( (rp=(BUFSIZ-1)) & (step>0) ) {
            let rp = 0;
        } else { if ( (rp=0) & (step<0) ) {
            let rp = BUFSIZ - 1;
        } else {
            let rp = rp + step;
        }}

        let s = LINBUF[rp];

        /* prevent stepping into unwritten buf slots, only non empty strings
           are written to the buffer so an empty string indicates unwritten * /
        if ( (s.length()=0) & ~(rp=bp) ) {
            if ( (rp=(BUFSIZ-1)) & (step<0) ) {
                let rp = 0;
            } else { if ( (rp=0) & (step>0) ) {
                let rp = BUFSIZ - 1;
            } else {
                let rp = rp - step;
            }}
            let s = LINBUF[rp];
        }
END ##TEST## */

        do tb.puts(s);

        return s;
    }


    method String negrec(int step) {
        var String s;

        let rp = rp + step;
        if (rp < 0) {
            let rp = BUFSIZ + rp;
        }

        let s = LINBUF[rp];

        if ( (s.length()=0) & ~(rp=bp) ) {
        }

        return s;
    }


    method String posrec(int step) {
        var String s;

        let rp = rp + step;
        if (~(rp <  BUFSIZ)) {
            let rp = rp - BUFSIZ;
        }

        let s = LINBUF[rp];

        if ( (s.length()=0) & ~(rp=bp) ) {
        }

        return s;
    }


    method void print(String s) {
        do tb.puts(s);
        return;
    }


    method void echo(String s) {
        do tb.prints(s);
        return;
    }


    method String strdup(String s) {
        var int i;
        var String t;

        let t = String.new(MAXLEN);
        let i = 0;
        while (i < s.length()) {
            do t.appendChar(s.charAt(i));
            let i = i + 1;
        }

        return t;
    }
}
