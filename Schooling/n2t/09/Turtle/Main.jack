class Main {

    static boolean running;
    static int QUIT;
    static int INT, STR;


    function void main() {
        var String banner;

        let banner = "Turtle 0.01";
        do Output.moveCursor(0, 23);
        do Output.printString(banner);
        do banner.dispose();
        do Screen.setColor(true);
        do Screen.drawLine(0, 13, 509, 13);

        do Turtle.init(2);
        do Vector.init();
        do Collection.init();
        do LibIO.init();
        do LibSym.init();
        do Lex.init(
            LibSym.ctab(),
            34,
            92,
            LibIO.esctab(),
            LibSym.CHARSETSIZE(),
            LibSym.CHARSETSIZE()+1);
        do Parse.init();
        do Eval.init();
        do Exec.init();

        let QUIT = Exec.QUIT();
        let INT = LibSym.INT();
        let STR = LibSym.STR();

        do Main.run();

        // todo: disposes

        return;
    }


    function void run() {
        var Collection argv;
        var Symbol syscall;

        let running = true;

        while (running) {
            let argv = Parse.next();
            let syscall = Main.try(argv);
            let running = syscall.data() = QUIT;
            do syscall.dispose();
            do LibSym.destroyList(argv);
        }

        return;
    }


    function Symbol try(Collection argv) {
        var String s;
        var Symbol ret;

        if (LibIO.noerr()) {  /* This is the check for parse errors. */
            let ret = Exec.cmdlin(argv);
            if (LibIO.noerr()) {
                do Main.enqueue(ret);
            }
            do LibSym.destroyList(ret);
        }

        /* Error messages are queued. */
        do LibIO.clearerr();

        while (LibIO.isqueued()) {
            let s = LibIO.get();
            do LibIO.echo(s);
            do s.dispose();
        }

        return ret;
    }


    function void enqueue(Symbol sym) {
        var Array a;
        var String s;
        var Collection list;
        var Symbol p;

        if (sym = null) {
            return;
        }

        let a = Array.new(1);

        if (sym.meta() = STR) {
            let s = "'%S'";
            let a[0] = sym.data();
            do LibIO.put(Str.format(s, a));
            do s.dispose();
        } else { if (sym.meta() = INT) {
            let s = String.new(6);
            do s.setInt(sym.data());
            do LibIO.put(s);
            do s.dispose();
        }}

        do a.dispose();

        return;
    }

}
