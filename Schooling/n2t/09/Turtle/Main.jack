class Main {

    static boolean running;
static boolean mv;  // ##DB##
    static int INT, LIST, STR;
    static Array FARGV;
    static String FSSTR, FDSTR;


    function void main() {
        do Main.printBanner();
        do Main.init();
        do Main.run();
        do Main.killall();
        return;
    }


    function void printBanner() {
        var int indent;
        var String banner;

        let banner = "Logo on Hack 0.01";
        let indent = 29 - (banner.length()/2);  /* magic number! */
        do Output.moveCursor(0, indent);
        do Output.printString(banner);
        do banner.dispose();
        do Screen.setColor(true);
        do Screen.drawLine(0, 13, 509, 13);  /* magic number!s */

        return;
    }


    function void init() {
let mv=false;  // ##DB##

        do Vector.init();
        do Turtle.init(2);
        do Collection.init();
        do LibIO.init();
        do LibSym.init();
        do Lex.init(
            LibSym.ctab(),
            34,  /* magic number! */
            92,  /* magic number! */
            LibIO.esctab(),
            LibSym.CHARSETSIZE(),
            LibSym.CHARSETSIZE()+1);
        do Parse.init();
        do Eval.init();
        do List.init();
        do Bin.init();
        do Exec.init();

        let INT = LibSym.INT();
        let LIST = LibSym.LIST();
        let STR = LibSym.STR();
        let FARGV = Array.new(1);
        let FSSTR = "'%S'";
        let FDSTR = "%D";

        return;
    }


    function void killall() {  // todo: this

        do Eval.kill();
        do Parse.kill();
        do Lex.kill();

        do FARGV.dispose();
        do FSSTR.dispose();
        do FDSTR.dispose();

        return;
    }


    function void run() {
        var Collection argv;

        let running = true;

        while (running) {
            let argv = Parse.next();
            do Main.try(argv);
if(mv){let mv=DB.dbi(DB.mc());}  // ##DB##
            do LibSym.destroyList(argv);
        }

        return;
    }


    function void try(Collection argv) {
        var String s;

        if (LibIO.noerr()) {
            do Main.execute(argv);
        }

        /* Error messages are queued. */
        do LibIO.clearerr();

        while (LibIO.isqueued()) {
            let s = LibIO.get();
            do LibIO.echo(s);
            do s.dispose();
        }

        return;
    }


    function void execute(Collection argv) {
        var Symbol ret;

        while (argv.length() > 0) {
            let ret = Exec.cmdlin(argv);
            do LibIO.fixCanvas();
            if (LibIO.noerr()) {
                do Main.enqueue(ret);
            } else {
                do LibSym.clearList(argv);
            }
            do LibSym.destroySym(ret);
        }

        return;
    }


    function void enqueue(Symbol sym) {
        var String s;

        if (sym = null) {
            return;
        }

let mv=sym.meta()=1&sym.data()=128;  // ##DB##

        let s =  LibSym.format(sym);

        if (~(s = null)) {
            do LibIO.put(s);
        }

        return;
    }


    function void stop() {
        let running = false;
        return;
    }

}
