class Lex {

    /* CTAB is an array of size 128.  It is used as something of a hashtable
     * in that it is indexed by a character.  Its values are bitmaps of the
     * character's type.  That bitmap is also used to implement arithmetic
     * operator precedence.  Most types are one-bit values.  Block types
     * and integer types have subtypes.  Block types are used by LibSym
     * list functions to recurse on the symbol's data.  Integer types are
     * used to announce an integer expression tree and afterwards, are masked
     * and used for arithmetic operator precedence.
     *
     * The bitmap is:
    32768 16384 8192 4096 2048 1024 512 256 128  64  32  16   8   4   2   1
        |    |     |    |    |    |   |   |   |   |   |   |   |   |   |   |
   unused    |     |    |    |    |   |   |   |   |   |   |   |   |   |   |
  symbol token     |    |    |    |   |   |   |   |   |   |   |   |   |   |
       integer token    |    |    |   |   |   |   |   |   |   |   |   |   |
                      EOS    |    |   |   |   |   |   |   |   |   |   |   |
                    blank character   |   |   |   |   |   |   |   |   |   |
                                 unused   |   |   |   |   |   |   |   |   |
                             string literal   |   |   |   |   |   |   |   |
                                      block end   |   |   |   |   |   |   |
                                              block   |   |   |   |   |   |
                                                  |\ /    /   |   |   |   |
                                    string expression   / |   |   |   |   |
                                                  \   /   |   |   |   |   |
                                   integer expression     |   |   |   |   |
                                             unary operator   |   |   |   |
                                                binary operator   |   |   |
                                                                   \  |  /
                                                       opreator precedance
     *
     * String expressions are calls to the format function.
     * Integer expressions are compound expressions i.e. including one or
     * more operators.
     */
    static Array CTAB;


    function void init() {
        var int i;

        let CTAB = Array.new(128);

        let i = 32;
        while (i < 128) {
            let CTAB[i] = 16384;
            let i = i + 1;
        }

        let i = 48;
        while (i < 58) {
            let CTAB[i] = 8192;
            let i = i + 1;
        }
 
        let CTAB[123] =   64;  // {
        let CTAB[ 40] =   80;  // (
        let CTAB[ 41] =   81;  // )
        let CTAB[ 38] =   89;  // &
        let CTAB[124] =   89;  // |
        let CTAB[ 61] =   90;  // =
        let CTAB[ 33] =   90;  // !
        let CTAB[ 60] =   90;  // <
        let CTAB[ 62] =   90;  // >
        let CTAB[ 43] =   91;  // +
        let CTAB[ 45] =   91;  // -
        let CTAB[126] =   91;  // ~
        let CTAB[ 37] =   92;  // %
        let CTAB[ 42] =   92;  // *
        let CTAB[ 47] =   92;  // /
        let CTAB[ 44] =   96;  // ,
        let CTAB[125] =  128;  // }
        let CTAB[ 34] =  256;  // "
        let CTAB[ 32] = 2048;  //  
        let CTAB[  0] = 4096;  // EOS

        return;
    }


    function int cclass(char c) {
        return CTAB[c];
    }


    function char getch(String s, int i) {
        if (~(i < s.length())) {
            return 0;
        }
        return s.charAt(i);
    }


    function int token(String s, String t, int i) {
        var char c;
        var int MASK;

        let MASK = CTAB[65] | CTAB[48];
        let c = Lex.getch(s, i);
        while (~( (CTAB[c]&MASK) = 0 )) {
            do t.appendChar(c);
            let i = i + 1;
            let c = Lex.getch(s, i);
        }

        return i;
    }


    function int string(String s, String t, int i) {
        var char c;

        let i = i + 1;

        while (i < s.length()) {

            let c = s.charAt(i);

            if (c = 34) {
                return i + 1;  // success
            }

            if (c = 92) {
                if ( (i+1) = s.length() ) {
                    return i + 2;  // EOS while scanning for quote
                }
                let i = i + 1;
                let c = s.charAt(i);
                if (c = 78) {
                    let c = 128;
                }
            }

            do t.appendChar(c);

            let i = i + 1;
        }

        return i + 1;  // EOS while scanning for quote
    }

}
