/**
 * Returns the index of the character immediately beyond the end of the token. 
 */
class Lex {

    static char STRING_DLM, NOLGL_MAP, EOS_MAP;
    static int TOKEN_MASK;
    static Array CTAB;


    /**
     * ctab is a table mapping characters to bitmaps
     */
    function void init(Array ctab, int tm, char sdlm, char nolgl, char eos) {
        let CTAB = ctab;
        let TOKEN_MASK = tm;
        let STRING_DLM = sdlm;
        let NOLGL_MAP = nolgl;
        let EOS_MAP = eos;
        return;
    }


    function void dispose() {
        do CTAB.dispose();
        return;
    }


    function int cclass(char c) {
        return CTAB[c];
    }


    function char getch(String s, int i) {

        if ( (i<0) | (i>s.length()) ) {
            return NOLGL_MAP;
        }

        if (i = s.length()) {
            return EOS_MAP;
        }

        return s.charAt(i);
    }


    function int token(String s, String t, int i) {
        var char c;

        while (i < s.length()) {
            let c = Lex.getch(s, i);
            if ( (Lex.cclass(c)&TOKEN_MASK) = 0 ) {
                return i;
            }
            do t.appendChar(c);
            let i = i + 1;
        }

        return i;
    }


    function int string(String s, String t, int i) {
        var char c;

        let i = i + 1;  /* discard left quote */

        while (i < s.length()) {

            let c = s.charAt(i);

            if (c = STRING_DLM) {  /* success */
                return i + 1;  /* discard right quote */
            }

            if (c = 92) {
                let i = i + 1;
                if ( (i = s.length()) | ((i+1) = s.length()) ) {
                    return -1;  /* EOS while scanning for quote */
                }
                let c = s.charAt(i);
                if (c = 78) {
                    let c = 128;
                }
            }

            do t.appendChar(c);

            let i = i + 1;
        }

        return -1;  /* EOS while scanning for quote */
    }


    function int EOS() { return CTAB[EOS_MAP]; }
    function int NOLGL() { return CTAB[NOLGL_MAP]; }

}
