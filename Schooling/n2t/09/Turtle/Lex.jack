/**
 * Returns the index of the character immediately beyond the end of the token. 
 * On error, returns length of input string plus one.
 */
class Lex {


    function int token(String s, String t, int i) {
        var char c, loc;

        if (i < 0) {
            return i;
        }

        while (i < s.length()) {
            let c = s.charAt(i);
            let loc = c | 32;
            if (~( ((c>47) & (c<58)) | ((loc>96) & (loc<123)) )) {
                return i;
            }
            do t.appendChar(c);
            let i = i + 1;
        }

        return i;
    }


    function int string(String s, String t, int i) {
        var char c;

        let i = i + 1;  /* discard left quote */

        while (i < s.length()) {

            let c = s.charAt(i);

            if (c = 34) {  /* success */
                return i + 1;  /* discard right quote */
            }

            if (c = 92) {
                if ( (i+1) = s.length() ) {  /* EOS while scanning for quote */
                    return -1;
                }
                let i = i + 1;
                let c = s.charAt(i);
                if (c = 78) {
                    let c = 128;
                }
            }

            do t.appendChar(c);

            let i = i + 1;
        }

        return -1;  /* EOS while scanning for quote */
    }

}
