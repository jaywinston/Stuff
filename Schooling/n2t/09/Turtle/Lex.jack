class Lex {

    static Array CTAB;
    static String BRACES, FARGDLMS, WORDDLMS;


    function void init() {

        let BRACES = "{}";

        let FARGDLMS = String.new(3);
        do FARGDLMS.appendChar(34);   // '"'
        do FARGDLMS.appendChar(44);   // ','
        do FARGDLMS.appendChar(123);  // '{'

        let WORDDLMS = String.new(4);
        do WORDDLMS.appendChar(32);   // ' '
        do WORDDLMS.appendChar(34);   // '"'
        do WORDDLMS.appendChar(61);   // '='
        do WORDDLMS.appendChar(123);  // '{'

        let CTAB = Array.new(128);

        let CTAB[ 32] = 1;  //  
        let CTAB[ 33] = 0;  // !
        let CTAB[ 34] = 0;  // "
        let CTAB[ 35] = 0;  // #
        let CTAB[ 36] = 0;  // $
        let CTAB[ 37] = 0;  // %
        let CTAB[ 38] = 3;  // &
        let CTAB[ 39] = 0;  // '
        let CTAB[ 40] = 0;  // (
        let CTAB[ 41] = 0;  // )
        let CTAB[ 42] = 0;  // *
        let CTAB[ 43] = 0;  // +
        let CTAB[ 44] = 0;  // ,
        let CTAB[ 45] = 0;  // -
        let CTAB[ 46] = 0;  // .
        let CTAB[ 47] = 0;  // /
        let CTAB[ 48] = 0;  // 0
        let CTAB[ 49] = 0;  // 1
        let CTAB[ 50] = 0;  // 2
        let CTAB[ 51] = 0;  // 3
        let CTAB[ 52] = 0;  // 4
        let CTAB[ 53] = 0;  // 5
        let CTAB[ 54] = 0;  // 6
        let CTAB[ 55] = 0;  // 7
        let CTAB[ 56] = 0;  // 8
        let CTAB[ 57] = 0;  // 9
        let CTAB[ 58] = 0;  // :
        let CTAB[ 59] = 0;  // ;
        let CTAB[ 60] = 0;  // <
        let CTAB[ 61] = 2;  // =
        let CTAB[ 62] = 0;  // >
        let CTAB[ 63] = 0;  // ?
        let CTAB[ 64] = 0;  // @
        let CTAB[ 65] = 0;  // A
        let CTAB[ 66] = 0;  // B
        let CTAB[ 67] = 0;  // C
        let CTAB[ 68] = 0;  // D
        let CTAB[ 69] = 0;  // E
        let CTAB[ 70] = 0;  // F
        let CTAB[ 71] = 0;  // G
        let CTAB[ 72] = 0;  // H
        let CTAB[ 73] = 0;  // I
        let CTAB[ 74] = 0;  // J
        let CTAB[ 75] = 0;  // K
        let CTAB[ 76] = 0;  // L
        let CTAB[ 77] = 0;  // M
        let CTAB[ 78] = 0;  // N
        let CTAB[ 79] = 0;  // O
        let CTAB[ 80] = 0;  // P
        let CTAB[ 81] = 0;  // Q
        let CTAB[ 82] = 0;  // R
        let CTAB[ 83] = 0;  // S
        let CTAB[ 84] = 0;  // T
        let CTAB[ 85] = 0;  // U
        let CTAB[ 86] = 0;  // V
        let CTAB[ 87] = 0;  // W
        let CTAB[ 88] = 0;  // X
        let CTAB[ 89] = 0;  // Y
        let CTAB[ 90] = 0;  // Z
        let CTAB[ 91] = 0;  // [
        let CTAB[ 92] = 0;  // \
        let CTAB[ 93] = 0;  // ]
        let CTAB[ 94] = 0;  // ^
        let CTAB[ 95] = 0;  // _
        let CTAB[ 96] = 0;  // `
        let CTAB[ 97] = 0;  // a
        let CTAB[ 98] = 0;  // b
        let CTAB[ 99] = 0;  // c
        let CTAB[100] = 0;  // d
        let CTAB[101] = 0;  // e
        let CTAB[102] = 0;  // f
        let CTAB[103] = 0;  // g
        let CTAB[104] = 0;  // h
        let CTAB[105] = 0;  // i
        let CTAB[106] = 0;  // j
        let CTAB[107] = 0;  // k
        let CTAB[108] = 0;  // l
        let CTAB[109] = 0;  // m
        let CTAB[110] = 0;  // n
        let CTAB[111] = 0;  // o
        let CTAB[112] = 0;  // p
        let CTAB[113] = 0;  // q
        let CTAB[114] = 0;  // r
        let CTAB[115] = 0;  // s
        let CTAB[116] = 0;  // t
        let CTAB[117] = 0;  // u
        let CTAB[118] = 0;  // v
        let CTAB[119] = 0;  // w
        let CTAB[120] = 0;  // x
        let CTAB[121] = 0;  // y
        let CTAB[122] = 0;  // z
        let CTAB[123] = 0;  // {
        let CTAB[124] = 3;  // |
        let CTAB[125] = 0;  // }
        let CTAB[126] = 0;  // ~

        return;
    }


    function int cclass(char c) {
        return CTAB[c];
    }


    /* collect substring of nested brackets delimited by l and r from s into t;
     * return last used index + 1
     */
    function int brackets(String s, String t, char l, char r, int i) {
        /* i + 1 is returned because the loop breaks on the closing delim.
           Adding one to the index indicates EOS where appropriate or
           an unclosed bracket as i will be greater than s.length().
           Or it conveniently places i on what is likely an operator. */
        var char c;
        var int blk, sLen;

        let sLen = s.length();
        let blk = 0;
        while (i < sLen) {
            let c = s.charAt(i);
            do t.appendChar(c);
            if (c = l) {
                let blk = blk + 1;
            } else { if (c = r) {
                let blk = blk - 1;
            }}
            if (blk = 0) {
                return i + 1;
            }
            let i = i + 1;
        }

        return i + 1;
    }


    function int string(String s, String t, int i) {
        var char c;
        var int len;

        let len = s.length();
        do t.appendChar(s.charAt(i));
        let i = i + 1;
        
        while (i < len) {
            let c = s.charAt(i);
            do t.appendChar(c);
            if (c = 92) {
                if ( (i+1) = s.length() ) {
                    return i + 2;
                }
                let i = i + 1;
                let c = s.charAt(i);
                if (c = 78) {
                    do t.appendChar(128);
                } else {
                    do t.appendChar(c);
                }
            } else { if (c = 34) {
                return i + 1;
            }}
            let i = i + 1;
        }

        return i + 1;  // EOS while scanning for quote
    }


    function int word(String s, String t, int i) {

        let i = Str.tkn(s, t, WORDDLMS, i);

        if (i < s.length()) {
            if (s.charAt(i) = 34) {
                let i = Lex.string(s, t, i);
                if (i > s.length()) {
                    do Error.send("unclosed quote");  // ##DB##
                    do Error.set(1);  // unclosed quote
                }
            } else { if (s.charAt(i) = 123) {
                let i = Lex.brackets(s, t, 123, 125, i);
            } else { if (s.charAt(i) = 61) {
                do t.appendChar(61);
                let i = Lex.word(s, t, i+1);
            }}}
        }

        if (i < s.length()) { if (~(s.charAt(i) = 32)) {
            let i = Lex.word(s, t, i);
        }}

        return i;
    }


    function int integer(String s, String t, String list, int i) {

        /* unary ops: '-' '~'; evaluated with term */
        while ((s.charAt(i)=45) | (s.charAt(i)=126)) {
            do t.appendChar(s.charAt(i));
            let i = i + 1;
        }

        if (s.charAt(i) = 40) {
            let i = Lex.brackets(s, t, 40, 41, i);
            if (i > s.length()) {
                do Error.send("unclosed parentheses");  // ##DB##
                do Error.set(1);  // unclosed parentheses
                return i;
            }
        } else { if (s.charAt(i) = 123) {
            let i = Lex.brackets(s, t, 123, 125, i);
            if (i > s.length()) {
                return i;
            }
        }}

        let i = Str.tkn(s, t, list, i);

        /* this includes case of op at s[0] ... */
        if (t.length() = 0) {
            do Error.send("unexpected operator");  // ##DB##
            do Error.set(1);  // unexpected operator
            return i;
        }

        /* ... which would crash here.
           But this covers the case of op after uop, e.g. "-+". */
        if ( (s.charAt(i-1)=45) | (s.charAt(i-1)=126) ) {
            do Error.send("unexpected operator");  // ##DB##
            do Error.set(1);  // unexpected operator
            return i;
        }

        if (i < s.length()) {
            if ((s.charAt(i)=40) | (s.charAt(i)=123)) {
                return Lex.integer(s, t, list, i);
            }
        }

        return i;
    }


    function int block(String s, String t, int i) {

        if (~(i < s.length())) {
            return i;
        }

        while (i < s.length()) {

            let i = Str.tkn(s, t, BRACES, i);

            if (i < s.length()) {
                if (s.charAt(i) = 125) {
                    return i;
                }
                if (s.charAt(i) = 123) {
                    let i = Lex.brackets(s, t, 123, 125, i);
                }
            }
        }

        return i;
    }


    function int fArg(String s, String t, int i) {

        if (~(i < s.length())) {
            return -1;
        }

        let i = Str.tkn(s, t, FARGDLMS, i);

        if (~(i < s.length())) {
            return i;
        }

        if (s.charAt(i) = 34) {
            let i = Lex.string(s, t, i);
        } else { if (s.charAt(i) = 123) {
            let i = Lex.brackets(s, t, 123, 125, i);
        }}

        if (i < s.length()) { if (~(s.charAt(i) = 44)) {
            return Lex.fArg(s, t, i);
        }}

        return i;
    }

}
