class Lib {

    static int CMDLIN, STR, BLK;

    function void init() {

        let CMDLIN = Const.CMDLIN();
        let STR = Const.STR();
        let BLK = Const.BLOCK();
        return;
    }

    function int mod(int n, int d) {
        var int q;

        let q = n / d;
        return n - (q*d);
    }


    function void clearSym(Symbol sym) {
        var int type;
        var String s;
        var Symbol p;

        while (~(sym = null)) {

            let p = sym.next();

            let type = sym.type();
            if ( (type=STR) | (type=CMDLIN) ) {
                let s = sym.value();
                if (~(s = null)) {
                    do s.dispose();
                }
            } else { if (type = BLK) {
                do Lib.clearSym(sym.value());
            }}

            do sym.dispose();

            let sym = p;
        }

        return;
    }

    function Symbol dupSym(Symbol sym) {
        var int type;
        var Symbol p;

        let p = Symbol.new(null, null, null);

        while (~(sym = null)) {

            let type = sym.type();

            if ( (type=STR) | (type=CMDLIN) ) {
                do p.append(Symbol.new(sym.name(),
                                       sym.type(),
                                       Str.dup(sym.value())));
            } else { if (type = BLK) {
                do p.append(Symbol.new(sym.name(),
                                       sym.type(),
                                       Lib.dupSym(sym.value())));
            } else {
                do p.append(Symbol.new(sym.name(), sym.type(), sym.value()));
            }}

            let sym = sym.next();
        }

        let sym = p;
        let p = p.next();
        do sym.setNext(null);
        do Lib.clearSym(sym);

        return p;
    }

}
