// depends on Vector.jack
class Turtle {

    static int TLEN;
    static int top, left, bottom, right;

    field boolean _pendown;
    field int direction, _x, _y;
    field Vector v;
    field ScreenArea sa;


    constructor Turtle new(int x, int y, int d, int t, int l, int b, int r) {
        let TLEN = 2;
        /* todo: validate boundaries */
        let top = t;
        let left = l;
        let bottom = b;
        let right = r;
        /* todo: validate coordinates */
        let _x = x;
        let _y = y;
        let direction = setDirection(d);
        let v = Vector.new();
        let sa = ScreenArea.new(TLEN*8, TLEN*8);
        let _pendown = false;
        do show();
        return this;
    }


    method void dispose() {
        do hide();
        do v.dispose();
        do sa.dispose();
        do Memory.deAlloc(this);
        return;
    }


    method int setDirection(int d) {
        let direction = Vector.mod(d, 360);
        if (direction < 0) {
            let direction = direction + 360;
        }
        return direction;
    }


    method int direction() {
        return direction;
    }


    method int x() {
        return _x;
    }


    method int y() {
        return _y;
    }


    method void drawTurtle(boolean color) {
        var int i, l, x, y;

        do Screen.setColor(color);
        do v.calculate(TLEN*3, direction);
        let x = _x + v.re();
        let y = _y - v.im();
        do Screen.drawCircle(_x, _y, TLEN);
        do v.calculate(TLEN*5, direction+20);
        do Screen.drawLine(x, y, x-v.re(), y+v.im());
        do v.calculate(TLEN*5, direction-20);
        do Screen.drawLine(x, y, x-v.re(), y+v.im());

        return;
    }


    method void show() {
        do sa.copy(_x-(TLEN*4), _y-(TLEN*4));
        do drawTurtle(true);
        return;
    }


    method void hide() {
        do drawTurtle(false);
        do sa.restore();
        return;
    }


    method int turn(int d) {
        do hide();
        do setDirection(direction + d);
        do show();
        return direction;
    }


    method int turnleft(int d) {
        return turn(d);
    }


    method int turnright(int d) {
        return turn(-d);
    }


    method int forward(int l) {
        var int x, y;

        if (l < 0) {
            return -1;  // error: won't go backwards
        }

        do v.calculate(l, direction);
        let x = _x + v.re();
        let y = _y - v.im();

        if ( ((x<left) | (x>right)) | ((y<top) | (y>bottom)) ) {
            return -2;  // error: target beyond boundary
        }

        do hide();

        if (_pendown) {
            do Screen.setColor(true);
            do Screen.drawLine(_x, _y, x, y);
        }

        let _x = x;
        let _y = y;

        do show();

        return l;
    }


    method void penup() {
        let _pendown = false;
        return;
    }


    method void pendown() {
        let _pendown = true;
        return;
    }

}
