class Turtle {

    static boolean RUNNING;
    static int TLEN;
    static int top, left, bottom, right;

    field boolean _pendown;
    field int direction, _x, _y;
    field Vector v;
    field ScreenArea sa;

    function void init() {
        let RUNNING = false;
        return;
    }


    constructor Turtle new(int x, int y, int d, int t, int l, int b, int r) {
        let TLEN = 10;
        if (~RUNNING) {
            let top = t;
            let left = l;
            let bottom = b;
            let right = r;
        }
        let _x = x;
        let _y = y;
        let direction = setDirection(d);
        let v = Vector.new();
        let sa = ScreenArea.new(TLEN*2, TLEN);
        let _pendown = false;
        do show();
        let RUNNING = true;
        return this;
    }

    method void dispose() {
        do hide();
        do v.dispose();
        do sa.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method int setDirection(int d) {
        let direction = Lib.mod(d, 360);
        if (direction < 0) {
            let direction = direction + 360;
        }
        return direction;
    }

    method int direction() {
        return direction;
    }

    method int x() {
        return _x;
    }

    method int y() {
        return _y;
    }

    method void drawTurtle() {
        var int i, l, x, y;

        do v.calculate(TLEN/2, direction);
        let x = _x + v.re();
        let y = _y - v.im();
        let i = 160;
        let l = 0;
        while (i < 180) {
            do v.calculate(TLEN-(l/6), direction+i);
            do Screen.drawLine(x, y, x+v.re(), y-v.im());
            let i = i + 2;
            let l = l + 1;
        }
        while (i < 200) {
            do v.calculate(TLEN-(l/6), direction+i);
            do Screen.drawLine(x, y, x+v.re(), y-v.im());
            let i = i + 2;
            let l = l - 1;
        }

        return;
    }

    method void show() {
        do sa.copy(_x-(TLEN/2), _y-(TLEN/2));
        do Screen.setColor(true);
        do drawTurtle();
        return;
    }

    method void hide() {
        do Screen.setColor(false);
        do drawTurtle();
        do sa.restore();
        return;
    }

    method int turn(int d) {
        do hide();
        do setDirection(direction + d);
        do show();
        return direction;
    }

    method int turnleft(int d) {
        return turn(d);
    }

    method int turnright(int d) {
        return turn(-d);
    }

    method void forward(int l) {
        var int x, y;

        do hide();

        do v.calculate(l, direction);
        let x = _x + v.re();
        let y = _y - v.im();

        if (_pendown) {
            do Screen.setColor(true);
            do Screen.drawLine(_x, _y, x, y);
        }

        let _x = x;
        let _y = y;

        do show();

        return;
    }

    method void penup() {
        let _pendown = false;
        return;
    }

    method void pendown() {
        let _pendown = true;
        return;
    }
}
