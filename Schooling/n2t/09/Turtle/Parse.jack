class Parse {

    static Array cclass;
    static Symbol stack;

    function void init() {
        let cclass = Parse.cclass();
        return;
    }


    function Symbol parse(String s) {
        var int i;
        var String t;
        var Symbol buf, out;

        let out = Symbol.new(null, null, null);
        let i = 0;
        while (i < s.length()) {
            let t = String.new(Str.MAXLEN());
            while (cclass[s.charAt(i)] = 0) {
                do t.appendChar(s.charAt(i));
                let i = i + i;
            }
            do out.append(Symbol.new(Str.dup(t), 0, null));
            do t.dispose();
            if (stack.meta() < cclass[s.charAt(i)]) {
                do Parse.push(s.charAt(i));
            } else {
                do out.append(Parse.token(s.charAt(s.charAt(i))));
            }
        }

        return out;
    }

    function void push(char c) {
        return;
    }

    function Symbol token(char c) {
        var Symbol tkn;

        return tkn;
    }

    function Array cclass() {
        var Array chars;

        let chars = Array.new(128);
        let chars[ 32] = 1;  //  
        let chars[ 33] = 0;  // !
        let chars[ 34] = 0;  // "
        let chars[ 35] = 0;  // #
        let chars[ 36] = 0;  // $
        let chars[ 37] = 0;  // %
        let chars[ 38] = 0;  // &
        let chars[ 39] = 0;  // '
        let chars[ 40] = 0;  // (
        let chars[ 41] = 0;  // )
        let chars[ 42] = 0;  // *
        let chars[ 43] = 0;  // +
        let chars[ 44] = 0;  // ,
        let chars[ 45] = 0;  // -
        let chars[ 46] = 0;  // .
        let chars[ 47] = 0;  // /
        let chars[ 48] = 0;  // 0
        let chars[ 49] = 0;  // 1
        let chars[ 50] = 0;  // 2
        let chars[ 51] = 0;  // 3
        let chars[ 52] = 0;  // 4
        let chars[ 53] = 0;  // 5
        let chars[ 54] = 0;  // 6
        let chars[ 55] = 0;  // 7
        let chars[ 56] = 0;  // 8
        let chars[ 57] = 0;  // 9
        let chars[ 58] = 0;  // :
        let chars[ 59] = 0;  // ;
        let chars[ 60] = 0;  // <
        let chars[ 61] = 0;  // =
        let chars[ 62] = 0;  // >
        let chars[ 63] = 0;  // ?
        let chars[ 64] = 0;  // @
        let chars[ 65] = 0;  // A
        let chars[ 66] = 0;  // B
        let chars[ 67] = 0;  // C
        let chars[ 68] = 0;  // D
        let chars[ 69] = 0;  // E
        let chars[ 70] = 0;  // F
        let chars[ 71] = 0;  // G
        let chars[ 72] = 0;  // H
        let chars[ 73] = 0;  // I
        let chars[ 74] = 0;  // J
        let chars[ 75] = 0;  // K
        let chars[ 76] = 0;  // L
        let chars[ 77] = 0;  // M
        let chars[ 78] = 0;  // N
        let chars[ 79] = 0;  // O
        let chars[ 80] = 0;  // P
        let chars[ 81] = 0;  // Q
        let chars[ 82] = 0;  // R
        let chars[ 83] = 0;  // S
        let chars[ 84] = 0;  // T
        let chars[ 85] = 0;  // U
        let chars[ 86] = 0;  // V
        let chars[ 87] = 0;  // W
        let chars[ 88] = 0;  // X
        let chars[ 89] = 0;  // Y
        let chars[ 90] = 0;  // Z
        let chars[ 91] = 0;  // [
        let chars[ 92] = 0;  // \
        let chars[ 93] = 0;  // ]
        let chars[ 94] = 0;  // ^
        let chars[ 95] = 0;  // _
        let chars[ 96] = 0;  // `
        let chars[ 97] = 0;  // a
        let chars[ 98] = 0;  // b
        let chars[ 99] = 0;  // c
        let chars[100] = 0;  // d
        let chars[101] = 0;  // e
        let chars[102] = 0;  // f
        let chars[103] = 0;  // g
        let chars[104] = 0;  // h
        let chars[105] = 0;  // i
        let chars[106] = 0;  // j
        let chars[107] = 0;  // k
        let chars[108] = 0;  // l
        let chars[109] = 0;  // m
        let chars[110] = 0;  // n
        let chars[111] = 0;  // o
        let chars[112] = 0;  // p
        let chars[113] = 0;  // q
        let chars[114] = 0;  // r
        let chars[115] = 0;  // s
        let chars[116] = 0;  // t
        let chars[117] = 0;  // u
        let chars[118] = 0;  // v
        let chars[119] = 0;  // w
        let chars[120] = 0;  // x
        let chars[121] = 0;  // y
        let chars[122] = 0;  // z
        let chars[123] = 0;  // {
        let chars[124] = 0;  // |
        let chars[125] = 0;  // }
        let chars[126] = 0;  // ~

        return chars;
    }
}

/* just in case
        let chars[  0] = 0;
        let chars[  1] = 0;
        let chars[  2] = 0;
        let chars[  3] = 0;
        let chars[  4] = 0;
        let chars[  5] = 0;
        let chars[  6] = 0;
        let chars[  7] = 0;
        let chars[  8] = 0;
        let chars[  9] = 0;
        let chars[ 10] = 0;
        let chars[ 11] = 0;
        let chars[ 12] = 0;
        let chars[ 13] = 0;
        let chars[ 14] = 0;
        let chars[ 15] = 0;
        let chars[ 16] = 0;
        let chars[ 17] = 0;
        let chars[ 18] = 0;
        let chars[ 19] = 0;
        let chars[ 20] = 0;
        let chars[ 21] = 0;
        let chars[ 22] = 0;
        let chars[ 23] = 0;
        let chars[ 24] = 0;
        let chars[ 25] = 0;
        let chars[ 26] = 0;
        let chars[ 27] = 0;
        let chars[ 28] = 0;
        let chars[ 29] = 0;
        let chars[ 30] = 0;
        let chars[ 31] = 0;
        let chars[127] = 0;
*/
