class Parse {

    static int BLANK, DELIM, BLOCK, END, EOS, CMDLIN, INT,
                INTEX, OP, STR, STREX, SYM, UOP;
    static int MASK;
    static String PS1, PS2;


    function void init() {
        let BLANK = Lex.cclass(32);
        let BLOCK = LibSym.BLOCK();
        let END = Lex.cclass(125);
        let EOS = 0;
        let CMDLIN = LibSym.CMDLIN();
        let DELIM = Lex.cclass(32) | Lex.cclass(44);
        let INT = LibSym.INT();
        let INTEX = LibSym.INTEX();
        let STR = LibSym.STR();
        let STREX = LibSym.STREX();
        let SYM = LibSym.SYM();
        let MASK = -16;
        let PS2 = "|";
        return;
    }


    function int cmdline(String s, Symbol argv, int i) {
        var int cclass;
        var String t;
        var Symbol next;

        while (i < s.length()) {

            let i = Str.lskip(s, 32, i);

            if (i = s.length()) {
                return i;
            }

            let cclass = Lex.cclass(s.charAt(i)) & MASK;

            if (cclass = END) {
                do argv.setTag(s);
                return i;
            }

            if (cclass = BLOCK) {
                let next = Symbol.new(null, BLOCK, null);
                let i = Parse.block(s, next, i);
                let s = next.tag();
                do next.setTag(null);
                do next.setData(next.next());
                do next.setNext(null);
                if (i < s.length()) {
                    let cclass = Lex.cclass(s.charAt(i));
                    if (cclass = INTEX) {
                        let i = Parse.intex(null, next, i);
                        let s = next.tag();
                        do next.setTag(null);
                        let next = Symbol.new(null, INTEX, next);
                    } else { if (cclass = STREX) {
                        let i = Parse.strex(s, next, i);
                        let s = next.tag();
                        do next.setTag(null);
                        let next = Symbol.new(null, STREX, next);
                    }}
                }
            } else { if (cclass = INT) {
                let t = String.new(s.length());
                let i = Lex.token(s, t, i);
                let next = Symbol.new(null, INT, t.intValue());
                do t.dispose();
                if (i < s.length()) { if (Lex.cclass(s.charAt(i)) = INTEX) {
                    let i = Parse.intex(s, next, i);
                    let s = next.tag();
                    do next.setTag(null);
                    let next = Symbol.new(null, INTEX, next);
                }}
            } else { if (cclass = INTEX) {
                let next = Symbol.new(null, INTEX, null);
                let i = Parse.intex(s, next, i);
                let s = next.tag();
                do next.setTag(null);
                do next.setData(next.next());
                do next.setNext(null);
            } else { if (cclass = STR) {
                let t = String.new(s.length());
                let i = Lex.string(s, t, i+1);
                let next = Symbol.new(null, STR, t);
                if (i < s.length()) { if (s.charAt(i) = 44) {
                    let i = Parse.strex(s, next, i);
                    let s = next.tag();
                    do next.setTag(null);
                    let next = Symbol.new(null, STREX, next);
                }}
            //} else { if (cclass = STREX) {
                //let next = Symbol.new(null, STREX, null);
                //let i = Parse.intex(s, next, i);
                //let s = next.tag();
                //do next.setTag(null);
            } else { if (cclass = SYM) {
                let t = String.new(s.length());
                let i = Lex.token(s, t, i);
                let next = Symbol.new(t, SYM, null);
                if (i < s.length()) {
                    let cclass = Lex.cclass(s.charAt(i));
                    if (cclass = INTEX) {
                        let i = Parse.intex(s, next, i);
                        let s = next.tag();
                        do next.setTag(null);
                        let next = Symbol.new(null, INTEX, next);
                    } else { if (cclass = STREX) {
                        let i = Parse.strex(s, next, i);
                        let s = next.tag();
                        do next.setTag(null);
                        let next = Symbol.new(null, STREX, next);
                    }}
                }
            } else {
                /* error */
            }}}}}//}

            do argv.append(next);
        }

        do argv.setTag(s);

        return i;
    }


    function int intex(String s, Symbol next, int i) {

        return i;
    }


    function int strex(String s, Symbol next, int i) {
        return i;
    }


    function int block(String s, Symbol block, int i) {
        var Symbol cmdlin;

        let cmdlin = Symbol.new(null, CMDLIN, null);
        let i = Parse.cmdline(s, cmdlin, i+1);
        do cmdlin.setData(cmdlin.next());
        do cmdlin.setNext(null);
        while (~(i < s.length())) {
            if (cmdlin.data() = null) {
                do cmdlin.dispose();
            } else {
                do block.append(cmdlin);
            }
            let s = IOBox.read(PS2);
            let cmdlin = Symbol.new(s, CMDLIN, null);
            let i = Parse.cmdline(s, cmdlin, 0);
            let s = cmdlin.tag();
            do cmdlin.setTag(null);
            do cmdlin.setData(cmdlin.next());
            do cmdlin.setNext(null);
        }

        if (cmdlin.data() = null) {
            do cmdlin.dispose();
        } else {
            do block.append(cmdlin);
        }

        do block.setTag(s);

        return i + 1;
    }

}
