class LibSym {


    function Symbol copySym(Symbol sym) {
        var int type;

        if (sym = null) {
            return null;
        }

        let type = sym.meta();

        if (type = LibSym.STR()) {
            return Symbol.new(Str.dup(sym.name()), type, Str.dup(sym.data()));
        }

        if (       (type=LibSym.BLOCK())
                | ((type=LibSym.CMDLIN()) 
                |  (type=LibSym.FUNC())) ) {
            return Symbol.new(Str.dup(sym.name()), type,
                              LibSym.copyList(sym.data()));
        }

        return Symbol.new(Str.dup(sym.name()), type, sym.data());
    }


    function Symbol copyList(Symbol sym) {
        var Symbol new;

        if (sym = null) {
            return null;
        }

        let new = LibSym.copySym(sym);

        let sym = sym.next();
        while (~(sym = null)) {
            do new.append(LibSym.copySym(sym));
            let sym = sym.next();
        }

        return new;
    }


    function void destroySym(Symbol sym) {
        var int type;
        var String s;
        var HashTable ht;
        var Turtle t;

        if (sym = null) {
            return;
        }

        let s = sym.name();

        if (~(s = null)) {
            do s.dispose();
        }

        let type = sym.meta();

        if (       (type=LibSym.STR())
                | ((type=LibSym.END())
                |  (type=LibSym.EXPR())) ) {
            let s = sym.data();
            do s.dispose();
        } else { if (   (type=LibSym.BLOCK())
                     | ((type=LibSym.CMDLIN())
                     |  (type=LibSym.FUNC())) ) {
            do LibSym.destroyList(sym.data());
        } else { if (type = LibSym.HASHTAB()) {
            let ht = sym.data();
            do LibSym.destroyHashTable(ht);
        } else { if (type = LibSym.TTL()) {
            //let t = sym.data();
            //do t.dispose();
        }}}}

        do sym.dispose();

        return;
    }


    function void destroyList(Symbol sym) {
        var Symbol next;

        while (~(sym = null)) {
            let next = sym.next();
            do LibSym.destroySym(sym);
            let sym = next;
        }

        return;
    }


    function void destroyHashTable(HashTable ht) {
        var int i;

        let i = 0;
        while (i < ht.hashSize()) {
            do LibSym.destroyList(ht.bucket(i));
            let i = i + 1;
        }

        do ht.dispose();

        return;
    }


    function void install(HashTable ht, String name, int type, int value) {
        var String s;
        var Symbol p;

        let p = ht.lookup(name);
        if (~(p = null)) {
            if (p.meta() = LibSym.STR()) {
                let s = p.data();
                do s.dispose();
            } else { if (p.meta() = LibSym.FUNC()) {
                do LibSym.destroyList(p.data());
            }}
        }

        do ht.install(name, type, value);

        return;
    }


    function int BLOCK     () { return  1; }
    function int CMD       () { return  2; }
    function int CMDLIN    () { return  3; }
    function int END       () { return  4; }
    function int EXPR      () { return  5; }
    function int FUNC      () { return  6; }
    function int HASHTAB   () { return  7; }
    function int INT       () { return  8; }
    function int STR       () { return  9; }
    function int SYM       () { return 10; }
    function int TTL       () { return 11; }
}
