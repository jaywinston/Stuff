/* CTAB is an array of size 128.  It is used as something of a hashtable
 * in that it is indexed by a character.  Its values are a bitmap of the
 * character's type.  That bitmap is also used to implement arithmetic
 * operator precedence.  Most types are one-bit values.  List types
 * and integer types have subtypes.  List types are used by LibSym
 * list functions to recurse on the symbol's data.  Integer types are
 * used to announce an arithmetic expression tree and afterwards, are masked
 * and used for arithmetic operator precedence.
 *
 * The bitmap is: todo: check this
 *   32768 16384 8192 4096 2048 1024 512 256 128  64  32  16   8   4   2   1
 *       |     |    |    |    |    |   |   |   |   |   |   |   |   |   |   |
 *  unused     |    |    |    |    |   |   |   |   |   |   |   |   |   |   |
 * illegal index    |    |    |    |   |   |   |   |   |   |   |   |   |   |
 *       symbol token    |    |    |   |   |   |   |   |   |   |   |   |   |
 *           integer token    |    |   |   |   |   |   |   |   |   |   |   |
 *               string literal    |   |   |   |   |   |   |   |   |   |   |
 *                 format expression   |   |   |   |   |   |   |   |   |   |
 *                                 block   |   |   |   |   |   |   |   |   |
 *                                    unused   |   |   |   |   |   |   |   |
 *                                   white space   |   |   |   |   |   |   |
 *                                             index   |   |   |   |   |   |
 *                                                   end   |   |   |   |   |
 *                                                      list   |   |   |   |
 *                              arithmetic expression / operator   |   |   |
 *                                                                 |   |   |
 *                                                                 site use
 */

class LibSym {

    static int BIN, BLOCK, CMD, CMDLIN, FUNC, INDEX, INT, ARTEX, LIST, OP,
        STR, FMTEX, NAME, UOP, LSP;
    static int HACK_CHARSET_SIZE, EOS_KEY, NOLGL_KEY, SITE;
    static HashTable rctab;


    function void init() {
        var Array ctab;

        /* magic number!s */
        let HACK_CHARSET_SIZE = 152;
        let SITE = 7;

        let EOS_KEY = HACK_CHARSET_SIZE;
        let NOLGL_KEY = HACK_CHARSET_SIZE + 1;

        let CMD = 1;
        let BIN = 3;
        let LSP = 5;

        let ctab = LibSym.ctab();

        let BLOCK = ctab[123];
        let INDEX = ctab[46];
        let INT = ctab[48];
        let ARTEX = ctab[40];
        let LIST = ctab[91];
        let STR = ctab[34];
        let FMTEX = ctab[44];
        let NAME = ctab[65];

        do ctab.dispose();

        let FUNC = LIST + 1;
        let CMDLIN = LIST + 2;

        let OP = ARTEX & ~LIST;
        let UOP = OP | SITE;

        let rctab = HashTable.new(15);

        return;
    }


    function void kill() {
        do LibSym.destroyHashTable(rctab);
        return;
    }


    function Array ctab() {
        var int i;
        var Array ctab;

        let ctab = Array.new(HACK_CHARSET_SIZE + 2);  /* magic number! */

        let i = 0;
        while (i < 128) {
            let ctab[i] = 0;
            let i = i + 1;
        }

        let i = 65;
        while (i < 90) {
            let ctab[i] = 10240;
            let i = i + 1;
        }

        let i = 97;
        while (i < 122) {
            let ctab[i] = 10240;
            let i = i + 1;
        }

        let ctab[36] = 10240; // $
        let ctab[95] = 10240; // _

        let i = 48;
        while (i < 58) {
            let ctab[i] = 4096;
            let i = i + 1;
        }
 
        let ctab[ 91] =    16;  // [
        let ctab[ 40] =    24;  // (
        let ctab[ 38] =    25;  // &
        let ctab[124] =    25;  // |
        let ctab[ 94] =    25;  // ^
        let ctab[ 61] =    26;  // =
        let ctab[ 33] =    27;  // !
        let ctab[ 60] =    27;  // <
        let ctab[ 62] =    27;  // >
        let ctab[ 43] =    28;  // +
        let ctab[ 45] =    28;  // -
        let ctab[126] =    28;  // ~
        let ctab[ 37] =    29;  // %
        let ctab[ 42] =    29;  // *
        let ctab[ 47] =    29;  // /
        let ctab[ 41] =    30;  // )
        let ctab[ 93] =    32;  // ]
        let ctab[ 46] =    80;  // .
        let ctab[ 32] =   128;  //  
        let ctab[123] =   528;  // {
        let ctab[125] =   544;  // }
        let ctab[ 44] =  1040;  // ,
        let ctab[ 34] =  2048;  // "

        let ctab[  EOS_KEY] =  8224;  // EOS
        let ctab[NOLGL_KEY] = 16384;  // illegal index

        return ctab;
    }


    function Symbol copySym(Symbol sym) {
        var int type;

        if (sym = null) {
            return null;
        }

        if (sym.tag() = null) {

            let type = sym.meta() & (LIST | STR);

            if (type = LIST) {
                return Symbol.new(null, sym.meta(),
                                  LibSym.copyList(sym.data()));
            }

            if (type = STR) {
                return Symbol.new(null, sym.meta(), Str.dup(sym.data()));
            }
        }

        return Symbol.new(Str.dup(sym.tag()), sym.meta(), sym.data());
    }


    function Collection copyList(Collection list) {
        var int i;
        var Collection new;

        if (list = null) {
            return null;
        }

        let new = Collection.new();
        let i = 0;
        while (i < list.length()) {
            do new.append(LibSym.copySym(list.nth(i)));
            let i = i + 1;
        }

        return new;
    }


    function void destroySym(Symbol sym) {
        var int type;
        var String s;

        if (sym = null) {
            return;
        }

        if (sym.tag() = null) {
            let type = sym.meta() & (LIST | STR);

            if (type = LIST) {
                do LibSym.destroyList(sym.data());
            } else { if (type = STR) {
                let s = sym.data();
                do s.dispose();
            }}
        }

        do sym.dispose();

        return;
    }


    function void destroyList(Collection list) {

        if (list = null) {
            return;
        }

        while (list.length() > 0) {
            do LibSym.destroySym(list.pop());
        }

        do list.dispose();

        return;
    }


    function void eradicateSym(Symbol sym) {
        var int type;
        var String s;

        if (sym = null) {
            return;
        }

        let type = sym.meta() & (LIST | STR);

        if (type = LIST) {
            do LibSym.eradicateList(sym.data());
        } else { if (type = STR) {
            let s = sym.data();
            do s.dispose();
        }}

        do sym.dispose();

        return;
    }


    function void eradicateList(Collection list) {

        if (list = null) {
            return;
        }

        while (list.length() > 0) {
            do LibSym.eradicateSym(list.pop());
        }

        do list.dispose();

        return;
    }


    function void clearList(Collection l) {
        while (l.length() > 0) {
            do LibSym.destroySym(l.pop());
        }
        return;
    }


    function void destroyHashTable(HashTable ht) {
        var int i;

        let i = 0;
        while (i < ht.hashSize()) {
            do LibSym.eradicateList(ht.bucket(i));
            let i = i + 1;
        }

        do ht.dispose();

        return;
    }


    function void install(HashTable ht, String name, int type, int value) {
        var String ref;
        var Symbol p, rcp;

        let p = ht.lookup(name);

        if (p = null) {
            let p = ht.install(name, type, value);
        } else {
            do name.dispose();
            if (~( (p.meta() & (STR|LIST)) = 0 )) {
                let rcp = LibSym.refcount(p.data());
                if (rcp.data() < 2) {
                    do LibSym.gc(p);
                }
            }
            do p.setMeta(type);
            do p.setData(value);
        }

        if (~( (type & (STR|LIST)) = 0 )) {
            let rcp = LibSym.refcount(value);
            do rcp.setData(rcp.data() + 1);
        }

        if (type = LIST) {
            do LibSym.tagList(p.data());
        }

        return;
    }


    function Symbol refcount(Symbol p) {
        var String r;
        var Symbol rp;

        let r = String.new(6);
        do r.setInt(p);
        let rp = rctab.lookup(r);
        if (rp = null) {
            let rp = rctab.install(r, null, 0);
        } else {
            do r.dispose();
        }

        return rp;
    }


    function void gc(Symbol p) {
        var String s;

        if ( (p.meta()&LIST) = LIST ) {
            do LibSym.eradicateList(p.data());
        } else { if ( (p.meta()&STR) = STR ) {
            let s = p.data();
            do s.dispose();
        }}

        return;
    }


    function void tagSym(Symbol p) {
        if (p.tag() = null) {
            do p.setTag("");
        }
        if ( (p.meta()&LIST) = LIST ) {
            do LibSym.tagList(p.data());
        }
        return;
    }


    function void tagList(Collection l) {
        var int i, len;
        var Symbol p;

        let len = l.length();
        let i = 0;
        while (i < len) {
            let p = l.nth(i);
            do LibSym.tagSym(p);
            let i = i + 1;
        }

        return;
    }


    function String format(Symbol p) {
        var int type;

        if (p = null) {
            return null;
        }

        let type = p.meta();

        if (type = 0) {
            return null;
        }

        if (  type       = INT)  { return LibSym.formatInt(p.data());  }
        if ( (type&STR)  = STR)  { return LibSym.formatStr(p.data());  }
        if ( (type&LIST) = LIST) { return LibSym.formatList(p.data()); }
        if ( (type&OP)   = OP)   { return LibSym.formatOp(p.data());   }
    
        return "?";
    }


    function String formatInt(int i) {
        var String s;

        let s = String.new(6);
        do s.setInt(i);

        return s;
    }


    function String formatOp(int op) {
        var String s;

        if (op > 1000) {
            let s = String.new(2);
            do s.appendChar(op/100);
            do s.appendChar(61);
        } else {
            let s = String.new(1);
            do s.appendChar(op);
        }

        return s;
    }


    function String formatStr(String s) {
        var String t;

        let t = String.new(s.length()+2);
        do t.appendChar(39);
        do Str.cat(t, s);
        do t.appendChar(39);

        return t;
    }


    function String formatList(Collection list) {
        var int i;
        var int len;
        var String s, t, u;
        var Symbol arg;

        let len = Str.MAXLEN();
        let s = String.new(len);
        do s.appendChar(91);

        let i = 0;
        while (i < list.length()) {

            let t = LibSym.format(list.nth(i));

            if ( (s.length()+t.length()) > len ) {
                let len = len + Str.MAXLEN();
                let s = Str.realloc(s, len);
            }

            do Str.cat(s, t);
            do t.dispose();

            let i = i + 1;

            if (i < list.length()) {
                if ( (s.length()+1) > len ) {
                    let len = len + Str.MAXLEN();
                    let s = Str.realloc(s, len);
                }
            }

            do s.appendChar(32);
        }

        if (s.length() > 1) {
            do s.eraseLastChar();
        }

        do s.appendChar(93);

        return s;
    }


    function int BIN() { return BIN; }
    function int BLOCK() { return BLOCK; }
    function int CHARSETSIZE() { return HACK_CHARSET_SIZE; }
    function int CMD() { return CMD; }
    function int CMDLIN() { return CMDLIN; }
    function int FUNC() { return FUNC; }
    function int INT() { return INT; }
    function int INDEX() { return INDEX; }
    function int ARTEX() { return ARTEX; }
    function int LIST() { return LIST; }
    function int OP() { return OP; }
    function int SITE() { return SITE; }
    function int STR() { return STR; }
    function int FMTEX() { return FMTEX; }
    function int NAME() { return NAME; }
    function int UOP() { return UOP; }
    function int LSP() { return LSP; }

}
