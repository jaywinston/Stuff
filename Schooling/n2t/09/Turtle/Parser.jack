class Parser {

    field String blank, delims;
    field HashTable symtab;

    /* token types */
    static int CMD, CMDLIN, INT, STR;

    constructor Parser new() {
        var int STKSIZ;

        let blank = " ";
        let delims = "+-*/%(){}";
        let symtab = HashTable.new();
        let CMD = 0;
        let INT = 1;
        let STR = 2;
        let CMDLIN = 3;
        let STKSIZ = 50;

        do installKWs();

        return this;
    }

    method void dispose() {
        do delims.dispose();
        do symtab.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void installKWs() {
        var int i;

        let i = 0;
        do installKW("BLOCK",     CMD, i);  let i = i + 1;
        do installKW("CLEAR",     CMD, i);  let i = i + 1;
        do installKW("FORWARD",   CMD, i);  let i = i + 1;
        do installKW("FUNCTION",  CMD, i);  let i = i + 1;
        do installKW("PENDOWN",   CMD, i);  let i = i + 1;
        do installKW("PENUP",     CMD, i);  let i = i + 1;
        do installKW("PRINT",     CMD, i);  let i = i + 1;
        do installKW("TURNLEFT",  CMD, i);  let i = i + 1;
        do installKW("TURNRIGHT", CMD, i);  let i = i + 1;
        do installKW("QUIT",      CMD, i);

        return;
    }

    method void installKW(String name, int type, int val) {
        do symtab.install(name, type, val);
        do name.dispose();
        return;
    }

    /* stub */
    method Object parse(String s) {
        var int i;
        var String token;
        var Object cmd, argv;

        let token = String.new(s.length());
        let i = Str.tkn(s, token, blank, 0);
        if (token.charAt(i-1) = 32) {
            do token.eraseLastChar();
        }
        let cmd = symtab.lookup(token);
        let argv = Object.dup(cmd);
        while (i < s.length()) {
            do Str.truncate(token);
            let i = Str.tkn(s, token, blank, i);
            do argv.setNext(eval(token, 0));
        }

        do token.dispose();

        return argv;
    }

    /* stub */
    method Object eval(String s, int i) {
        var char op;
        var int n;
        var String token;
        var Object arg;

        let token = String.new(s.length());

        let i = Str.tkn(s, token, delims, i);
        if (i < s.length()) {
            let op = token.charAt(token.length()-1);
        } else {
            let op = 0;
        }

        if (~(op = 0)) {
       		do token.eraseLastChar();
        }

        if (op = 34) {
            let arg = Object.new(lib.NULLS(), STR, token);
        }
        let n = String.intValue(s);
        let arg = Object.new(lib.NULLS(), INT, n);

        do token.dispose();

        return arg;
    }

    method void expr(String s) {
        var char op;

        if (op = 43) {  // +
        } else { if (op = 45) {  // -
        } else { if (op = 42) {  // *
        } else { if (op = 47) {  // /
        } else { if (op = 37) {  // %
        } else { if (op = 34) {  // "
        } else { if (op = 41) {  // )
        } else { if (op = 123) {  // {
        }}}}}}}}

        return;
    }

}
