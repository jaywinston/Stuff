class Parser {

    field String blank, delims;
    field HashTable symtab;

    /* token types */
    static int CMD, CMDLIN, FUNC, INT, STR, TYPE;

    constructor Parser new() {
        let blank = " ";
        let delims = "+-*/%(){}";
        let symtab = HashTable.new();
        do installKWs();
        return this;
    }

    method void dispose() {
        do blank.dispose();
        do delims.dispose();
        do symtab.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void installKWs() {
        var int i;
        var Object p;

        let i = 0;
        do installKW("type",    0, i);  let i = i + 1;  // 'type' must be first
        do installKW("cmd",     0, i);  let i = i + 1;
        do installKW("cmdlin",  0, i);  let i = i + 1;
        do installKW("func",    0, i);  let i = i + 1;
        do installKW("int",     0, i);  let i = i + 1;
        do installKW("str",     0, i);

        let p = symtab.lookup("type");    let TYPE   = p.value();
        let p = symtab.lookup("cmd");     let CMD    = p.value();
        let p = symtab.lookup("cmdlin");  let CMDLIN = p.value();
        let p = symtab.lookup("func");    let FUNC   = p.value();
        let p = symtab.lookup("int");     let INT    = p.value();
        let p = symtab.lookup("str");     let STR    = p.value();

        let i = 0;
        do installKW("BLOCK",     CMD, i);  let i = i + 1;
        do installKW("CLEAR",     CMD, i);  let i = i + 1;
        do installKW("FORWARD",   CMD, i);  let i = i + 1;
        do installKW("FUNCTION",  CMD, i);  let i = i + 1;
        do installKW("PENDOWN",   CMD, i);  let i = i + 1;
        do installKW("PENUP",     CMD, i);  let i = i + 1;
        do installKW("PRINT",     CMD, i);  let i = i + 1;
        do installKW("REPEAT",    CMD, i);  let i = i + 1;
        do installKW("TURNLEFT",  CMD, i);  let i = i + 1;
        do installKW("TURNRIGHT", CMD, i);  let i = i + 1;
        do installKW("QUIT",      CMD, i);

        return;
    }

    method void installKW(String name, int type, int val) {
        do symtab.install(name, type, val);
        do name.dispose();
        return;
    }

    /* stub */
    method Object parse(String s) {
        var int i;
        var String token;
        var Object argv;

        let token = String.new(s.length());

        let i = Str.tkn(s, token, blank, 0);
        if (token.charAt(i-1) = 32) {
            do token.eraseLastChar();
        }

        let argv = Object.dup(symtab.lookup(token));

        while (i < s.length()) {
            do Str.truncate(token);
            let i = Str.tkn(s, token, blank, i);
            if (token.charAt(token.length()-1) = 32) {
                do token.eraseLastChar();
            }
            do argv.append(eval(token));
        }

        do token.dispose();

        return argv;
    }

    /* stub */
    method Object eval(String s) {
        var char i,c, op;
        var int n;
        var String token;
        var Object arg;

        let token = String.new(s.length());

        let i = Str.tkn(s, token, delims, 0);

        let c = token.charAt(0);

        if (i < s.length()) {
            let op = token.charAt(token.length()-1);
       		do token.eraseLastChar();
        } else {
            let op = 0;
        }

        let c = s.charAt(0);

        if (c = 34) {
            if (s.charAt(s.length()-1) = 34) {
                let arg = Object.new(token, STR, expr(token, 0));
            } else {
                do Error.set(0);
                return null;
            }
        } else { if ( ((c>48) & (c<58)) | (((c|32)>96) & ((c|32)<123)) ) {
            let arg = Object.new(token, INT, expr(token, 0));
        } else {
            do Error.set(0);
            return null;
        }}

        do token.dispose();

        return arg;
    }

    method String expr(String s, int i) {
        var char op;
        var int sLen;
        var String n, token;

        if (s.charAt(0) = 34) {
            do s.eraseLastChar();
            let i = 1;
            let sLen = s.length();
            while (i < sLen) {
                do s.setCharAt(i-1, s.charAt(i));
                let i = i + 1;
            }
            do s.eraseLastChar();
            return Str.dup(s);
        }

        let token = String.new(s.length());
        let i = Str.tkn(s, token, delims, i);
        if (i < s.length()) {
            let op = s.charAt(i-1);
        } else {
            return String.intValue(token);
        }

        if (op = 43) {            // +
        } else { if (op = 45) {   // -
        } else { if (op = 42) {   // *
        } else { if (op = 47) {   // /
        } else { if (op = 37) {   // %
        } else { if (op = 41) {   // )
        } else { if (op = 123) {  // {
        }}}}}}}

        return ""; // stub
    }

}
