class Parser {

    field String tknbuf;
    field Array stack;

    constructor Parser new() {
        var int STKSIZ;

        let STKSIZ = 50;

        let tknbuf = String.new(lib.MAXLEN());
        let stack = Array.new(STKSIZ);

        return this;
    }

    method List parse(String s) {
        var int i;
        var char c;
        var List argv;

        if (s.length() = 0) {
            return null;
        }

        while (tknbuf.length() > 0) {
            do tknbuf.eraseLastChar();
        }

        let i = 0;
        let c = s.charAt(0);
        while ( ~(c=32) & (i<s.length()) ) {
            do tknbuf.appendChar(s.charAt(i));
            let c = s.charAt(i);
            let i = i + 1;
        }

        let argv = List.new(lib.hash(tknbuf));

        if (i < s.length()) {
        let c = s.charAt(i);
        while ( (c=32) & (i<s.length()) ) {
            let c = s.charAt(i);
            let i = i + 1;
        }

        while (tknbuf.length() > 0) {
            do tknbuf.eraseLastChar();
        }

        while (i < s.length()) {
            do tknbuf.appendChar(s.charAt(i));
            let i = i + 1;
        }

        do argv.append(eval(tknbuf));
        }

        return argv;
    }

    method List eval(String s) {
        var int i, sp;
        var String sbuf;
        var List argv;

        if (s.length() = 0) {
            return null;
        }

        let argv = null;
        let sp = 0;
/* very wrong! fix it! */
//        let i = 0;
//        while (i < s.length()) {
//            while ( (s.charAt(i)>47) & (s.charAt(i)<58) ) {
//                let i = i + 1;
//            }
            let stack[sp] = s.intValue();
            let sp = sp + 1;
//        }

        let sp = sp - 1;
        let argv = List.new(stack[sp]);

        let sp = sp - 1;
        while (sp > -1) {
            do argv.append(stack[sp]);
            let sp = sp - 1;
        }

        return argv;
    }

}
