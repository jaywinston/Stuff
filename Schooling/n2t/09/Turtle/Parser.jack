class Parser {

    field String delims, token;

    /* token types */
    static int INT, OP, STR, SYM;

    constructor Parser new(String dlms) {
        let delims = dlms;
        let token = String.new(const.MAXLEN());
        let INT = const.INT();
        let OP = const.OP();
        let STR = const.STR();
        let SYM = const.SYM();
        return this;
    }

    method void dispose() {
        do token.dispose();
        do delims.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method Symbol parse(String s) {
        var char op;
        var int i, sLen;
        var Symbol stream;

        let sLen = s.length();
        let i = Str.tkn(s, token, delims, 0);

        if (i = sLen) {
            return Parser.classify(token);
        }

        let op = s.charAt(i-1);
        let stream = Symbol.new(null, OP, s.charAt(i-1));
        if (token.length() > 1) {
            do token.eraseLastChar();
        }
        do stream.append(Parser.classify(token));

        while (i < sLen) {
            do Str.truncate(token);
            let i = Str.tkn(s, token, delims, i);

            if (i < sLen) {
                let op = s.charAt(i-1);
                if (token.length() > 1) {
                    do token.eraseLastChar();
                }
                if ( (op=43) | (op=45) ) {
                    do stream.append(Symbol.new(null, OP, s.charAt(i-1)));
                    do stream.append(Parser.classify(token));
                } else {
                    do stream.append(Parser.classify(token));
                    do stream.append(Symbol.new(null, OP, s.charAt(i-1)));
                }
            } else {
                do stream.append(Parser.classify(token));
            }

        }

        return stream;
    }

    function Symbol classify(String s) {
        var char c;

        let c = s.charAt(0);

        if (c = 34) {
            do s.eraseLastChar();
            do Str.shift(s, 1);
            do s.eraseLastChar();
            return Symbol.new(null, STR, Str.dup(s));
        } else { if ( (c>47) & (c<58) ) {
            return Symbol.new(null, INT, String.intValue(s));
        } else { if ((c|1) = 41) {
            return Symbol.new(null, OP, c);
        }}} 

        return Symbol.new(null, SYM, Str.dup(s));
    }

}
