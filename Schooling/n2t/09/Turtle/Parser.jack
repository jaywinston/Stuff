class Parser {

    field String delims;
    field HashTable symtab;

    static int CMD, INT, STR;

    constructor Parser new() {
        var int STKSIZ;

        let STKSIZ = 50;
        let delims = " +-*/%(){}";
        let symtab = HashTable.new();
        let CMD = 0;
        let INT = 1;
        let STR = 2;

        do installKWs();

        return this;
    }

    method void dispose() {
        do delims.dispose();
        do symtab.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void installKWs() {
        var int i;

        let i = 0;
        do installKW("PENDOWN",   CMD, i);  let i = i + 1;
        do installKW("PENUP",     CMD, i);  let i = i + 1;
        do installKW("TURNLEFT",  CMD, i);  let i = i + 1;
        do installKW("TURNRIGHT", CMD, i);  let i = i + 1;
        do installKW("FORWARD",   CMD, i);  let i = i + 1;
        do installKW("BLOCK",     CMD, i);  let i = i + 1;
        do installKW("PRINT",     CMD, i);  let i = i + 1;
        do installKW("CLEAR",     CMD, i);  let i = i + 1;
        do installKW("QUIT",      CMD, i);
        return;
    }

    method void installKW(String name, int type, int val) {
        do symtab.install(name, type, val);
        do name.dispose();
        return;
    }

    /* stub */
    method List parse(String s) {
/*
        var int i;
        var char c;
        var Object argv;
*/

        if (s.length() = 0) {
            return null;
        }

//        while (token.length() > 0) {
//            do token.eraseLastChar();
//        }

        return eval(s);
    }

    /* stub */
    method List eval(String s) {
        var int i, sp;
        var String token;
        var Object argv, p;

        if (s.length() = 0) {
            return null;
        }

        let token = Str.tkn(s, delims);

/* fix me */
//        if (~(token.charAt(token.length()-1) = 32)) {
//            /* abort */
//        }
//        do token.eraseLastChar();
        if (token.charAt(token.length()-1) = 32) {
       		do token.eraseLastChar();
        }
/* end (this) fix me */

        let argv = symtab.lookup(token);
        if (argv = null) {
            return null;
        }
        if (~(argv.type() = CMD)) {
            /* abort */
        }

        if (s.length() > 0) {
            let p = Object.new(lib.NULLS(), INT,
                               String.intValue(Str.tkn(s, delims)));
        }

        return argv;
    }

}
