// a general data structure with methods to implement stack, queue, or list

class Collection {

    static int VAL, NEXT, NODESIZ;

    field int length;
    field Array end, head, tail;


    function void init() {
        let NODESIZ = 2;
        let NEXT = 0;
        let VAL = 1;
        return;
    }


    constructor Collection new() {
        let tail = Array.new(NODESIZ);
        let end = null;
        let tail[NEXT] = end;
        let head = tail;
        let length = 0;
        return this;
    }


    method void dispose() {
        while (~(head = end)) {
            let tail = head[NEXT];
            do head.dispose();
            let head = tail;
        }
        return;
    }


    method int length() {
        return length;
    }


    method void append(int val) {
        var Array node;

        let node = Array.new(NODESIZ);
        let node[NEXT] = end;
        let tail[NEXT] = node;
        let tail[VAL] = val;
        let tail = node;
        let length = length + 1;

        return;
    }


    method void push(int val) {
        var Array node;

        let node = Array.new(NODESIZ);
        let node[VAL] = val;
        let node[NEXT] = head;
        let head = node;
        let length = length + 1;

        return;
    }


    method int pop() {
        var int val;
        var Array node;

        if (head[NEXT] = end) {
            return 0;
        }

        if (head = end) {
            let end = null;
        }

        let node = head;
        let head = head[NEXT];
        let val = node[VAL];
        do node.dispose();
        let length = length - 1;

        return val;
    }


    method Array _nth(int i) {
        var Array p;

        if ( (i<0) | ~(i<length) ) {
            return -1;
        }

        let p = head;
        while (i > 0) {
            let p = p[NEXT];
            let i = i - 1;
        }

        return p;
    }


    method int nth(int i) {
        var Array p;

        if (i < 0) {
            let p = _nth(length+i);
        } else {
            let p = _nth(i);
        }
        /* todo: err check */

        return p[VAL];
    }


    method void setnth(int i, int val) {
        var Array p;

        let p = _nth(i);
        /* todo: err check */
        let p[VAL] = val;

        return;
    }


    method void insert(int i, int val) {
        var Array node, p;

        if (i < 0) {
            return;
        }

        if (i = 0) {
            do push(val);
            return;
        }

        if (i = length) {
            do append(val);
            return;
        }

        if (i > length) {
            return;
        }

        let node = Array.new(NODESIZ);
        let p = _nth(i-1);
        /* todo: err check */
        let node[VAL] = val;
        let node[NEXT] = p[NEXT];
        let p[NEXT] = node;
        let length = length + 1;

        return;
    }


    method int remove(int i) {
        var int val;
        var Array p, q;

        if (i < 0) {
            return 0;
        }

        if (i = 0) {
            return pop();
        }

        if (~(i < length)) {
            return 0;
        }

        let p = _nth(i-1);
        /* todo: err check */
        let q = p[NEXT];
        let p[NEXT] = q[NEXT];
        let val = q[VAL];
        do q.dispose();
        let length = length - 1;

        return val;
    }


    method Collection slice(int i, int j) {
        var Collction list, slice;

        let list = this;
        let slice = Collection.new();
        while (i < j) {
            do slice.append(list.nth(i));
            let i = i + 1;
        }

        return slice;
    }


    method void extend(Collection c) {
        var Array p;

        let p = _nth(length-1);
        let p[NEXT] = c._nth(0);
        let tail = c._nth(c.length());
        let end = tail[NEXT];
        let length = length + c.length();

        return;
    }

}
