/**
 * Note the class name vs the file name and compile appropriately.
 * I make a test directory, symlink to the jack files, and link
 * <testdir>/Main.jack -> ../Tests.jack
 */
class Main {


    function void main() {
        do testrunner.run();  // see ./runtests
        return;
    }


    function void fail(String f) {
        if (~(f = null)) {
            do Output.printString(f);
            do f.dispose();
        }
        while(true){}
        return;
    }


    /**
     * memory check
     */
    function void mk() {
        var int n;

        let n = DB.mc();
        if (~(n = 0)) {
            do Main.print(22,0, "Memory leak detected: ");
            do Output.printInt(n);
            if (n = 1) {
                do Main.print(-1,0," object. Press any key to continue");
            } else {
                do Main.print(-1,0," objects. Press any key to continue");
            }
            do DB.pause();
            do Screen.clearScreen();
            do Output.moveCursor(0,0);
            do DB.mv();
            do Main.fail(null);
        }

        return;
    }


    function void print(int r, int c, String s) {
        if ( (r>-1) & (c>-1) ) {
            do Output.moveCursor(r,c);
        }
        do Output.printString(s);
        do s.dispose();
        return;
    }


    // The Tests!


    function void Vector_kill() {
        do Screen.clearScreen();
        do Main.print(0,0,"Testing Vector.kill()...");
        do Vector.init();
        do Vector.kill();
        do Main.print(-1,0," done.");
        do Main.print(1,0,"press any key for memory check");
        do DB.pause();
        return;
    }


    function void Vector_sinusoidals() {
        var int i;
        var Vector v;

        do Screen.clearScreen();
        do Main.print(0,0,"Testing Vector.sin() and Vector.cos()");
        do Vector.init();

        do Main.print((128+Vector.sin(0))/11, 1, "Sine:");
        let i = 0;
        while (i < 361) {
            do Screen.drawPixel(76+i, 128+Vector.sin(i));
            let i = i+1;
        }

        do Main.print((128+Vector.cos(0))/11, 1, "Cosine:");
        let i = 0;
        while (i < 361) {
            do Screen.drawPixel(76+i, 128+Vector.cos(i));
            let i = i+1;
        }

        do Vector.kill();

        do Main.print(1, 0, "press any key to continue");
        do DB.pause();

        return;
    }


    function void Vector_new() {
        var int i;
        var Vector v;

        do Screen.clearScreen();
        do Vector.init();

        do Main.print(0,0,"Testing Vector.New()");
        let i = 0;
        while (i < 361) {
            let v = Vector.new(100,i);
            do Screen.drawPixel(255+v.i(), 128+v.r());
            do v.dispose();
            let i = i+1;
        }

        do Vector.kill();

        return;
    }


/*
    function void setUp() {
        var char stringDelimiter, escapeCharacter;
        var int eosKey, illegalKey;
        var Array charToBitmapTable, escapeSequenceTable;

        do Turtle.init(2);
        do Collection.init();
        do LibIO.init();
        do LibSym.init();

        let stringDelimiter = 34;
        let escapeCharacter = 92;
        let eosKey = LibSym.CHARSETSIZE();
        let illegalKey = LibSym.CHARSETSIZE() + 1;
        let charToBitmapTable = LibSym.ctab();
        let escapeSequenceTable = LibIO.esctab();

        do Lex.init(
            charToBitmapTable,
            escapeSequenceTable,
            escapeCharacter,
            stringDelimiter,
            eosKey,
            illegalKey);
        do Parse.init();
        do Eval.init();
        do List.init();
        do Bin.init();
        do Exec.init();

        return;
    }
*/


    function void stop() { return; }  // dummy

}
