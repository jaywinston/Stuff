class foo {

    static int INT, STR, SYM, BLOCK, INTEX, STREX;


    function void init() {
        let INT = LibSym.INT();
        let STR = LibSym.STR();
        let SYM = LibSym.SYM();
        let BLOCK = LibSym.BLOCK();
        let INTEX = LibSym.INTEX();
        let STREX = LibSym.STREX();
        return;
    }


    function Symbol foo(String s) {
        var int i, cclass;
        var String t;
        var Symbol argv, next;

        let argv = Symbol.new(null, null, null);

        let i = 0;
        while (i < s.length()) {

            let cclass = Lex.cclass(s.charAt(i));
            let t = String.new(s.length());
            let next = Symbol.new(null, cclass, t);

            if (cclass = STR) {
                let i = Lex.string(s, t, i+1);
                if (i < s.length()) {
                    if (s.charAt(i) = 44) {
                        let i = foo.strex(s, next, i+1);
                        let next = Symbol.new(null, STREX, next);
                    } else { if (~(s.charAt(i) = 32)) {
                        do Error.send("should be comma");  // ##DB##
                        do Error.set(0);
                        do LibSym.destroyList(next);
                        do LibSym.destroyList(argv);
                        return null;
                    } else {
                        let i = Str.lskip(s, 32, i);
                    }}
                }
            } else { if (cclass = BLOCK) {
                let i = foo.block(s, next, i);
                let s = next.name();
                do next.setName(null);
                let next = Symbol.new(null, BLOCK, next);
                if (i < s.length()) {
                    if ( (Lex.cclass(s.charAt(i))&-4) = 4 ) {
                        let i = foo.intex(s, next, i);
                        let s = next.name();
                        do next.setName(null);
                        let next = Symbol.new(null, INTEX, next);
                    } else { if (s.charAt(i) = 44) {
                        let i = foo.strex(s, next, i+1);
                        let s = next.name();
                        do next.setName(null);
                        let next = Symbol.new(null, STREX, next);
                    } else { if (~(s.charAt(i) = 32)) {
                        do Error.send("bad c after block");  // ##DB##
                        do Error.set(0);
                        do LibSym.destroyList(next);
                        do LibSym.destroyList(argv);
                        return null;
                    } else {
                        let i = Str.lskip(s, 32, i);
                    }}}
                }
            } else {
                let i = Lex.token(s, t, i);
                if (i < s.length()) {
                    if ( (Lex.cclass(s.charAt(i))&-4) = 4 ) {
                        let i = foo.intex(s, next, i);
                        if (Error.isSet()) {
                            do LibSym.destroyList(next);
                            do LibSym.destroyList(argv);
                            return null;
                        }
                        let next = Symbol.new(null, INTEX, next);
                    } else { if (~(s.charAt(i) = 32)) {
                        do Error.send("should be plus");  // ##DB##
                        do Error.set(0);
                        do LibSym.destroyList(next);
                        do LibSym.destroyList(argv);
                        return null;
                    } else {
                        let i = Str.lskip(s, 32, i);
                    }}
                }
            }}

            do argv.append(next);
        }

        let next = argv;
        let argv = argv.next();
        do next.dispose();

        return argv;
    }


    function int intex(String s, Symbol next, int i) {
        var char c;
        var int cclass;
        var String t;
        var Symbol buf, stack;

        if ( (next.meta()&-4) = 4 ) {
            let t = next.data();
            do t.dispose();
            let stack = next;
            let c = s.charAt(i);
            let cclass = Lex.cclass(c);
            while ( (cclass&-4) = 4 ) {
                let buf = Symbol.new(null, cclass, c);
                do buf.setNext(stack);
                let stack = buff;
                let i = i + 1;
                if (i = s.length()) {
                        do Error.send("expected integer");  //##DB##
                        do Error.set(0);
                        do LibSym.destroyList(stack);
                        return 0;
                }
                let c = s.charAt(i);
                let cclass = Lex.cclass(c);
            }
            let t = String.new(s.length());
        }

        return i;
    }

    function int strex(String s, Symbol next, int i) {
        return i;
    }

    function int block(String s, Symbol next, int i) {
        return i;
    }

}
