class foo {

    static int BLANK, DELIM, BLOCK, END, CMDLIN, INT, INTEX, STR, STREX, SYM;
    static int MASK;


    function void init() {
        let BLANK = Lex.cclass(32);
        let BLOCK = LibSym.BLOCK();
        let END = Lex.cclass(125);
        let CMDLIN = LibSym.CMDLIN();
        let DELIM = Lex.cclass(32) | Lex.cclass(44);
        let INT = LibSym.INT();
        let INTEX = LibSym.INTEX();
        let STR = LibSym.STR();
        let STREX = LibSym.STREX();
        let SYM = LibSym.SYM();
        let MASK = 124;
        return;
    }


    function int foo(String s, Symbol argv, int i) {
        var int cclass;
        var String t;
        var Symbol next;

        while (i < s.length()) {

            let i = Str.lskip(s, 32, i);

            if (i = s.length()) {
                return i;
            }

            let cclass = Lex.cclass(s.charAt(i)) & MASK;

            if (cclass = END) {
                do argv.setTag(s);
                return i;
            }

            if (cclass = BLOCK) {
                let next = Symbol.new(null, BLOCK, null);
                let i = foo.block(s, next, i);
                let s = next.tag();
                do next.setTag(null);
                do next.setData(next.next());
                do next.setNext(null);
                if (i < s.length()) {
                    let cclass = Lex.cclass(s.charAt(i));
                    if (cclass = INTEX) {
                        let i = foo.intex(s, next, i);
                        let s = next.tag();
                        do next.setTag(null);
                        let next = Symbol.new(null, INTEX, next);
                    } else { if (cclass = STREX) {
                        let i = foo.strex(s, next, i);
                        let s = next.tag();
                        do next.setTag(null);
                        let next = Symbol.new(null, STREX, next);
                    } else { if (~(cclass = BLANK)) {
                        /* error */
                    }}}
                }
            } else { if (cclass = INT) {
                let t = String.new(s.length());
                let i = Lex.token(s, t, i);
                let next = Symbol.new(null, INT, t.intValue());
                do t.dispose();
                if (i < s.length()) { if (Lex.cclass(s.charAt(i)) = INTEX) {
                    let i = foo.intex(s, next, i);
                    let s = next.tag();
                    do next.setTag(null);
                    let next = Symbol.new(null, INTEX, next);
                }}
            } else { if (cclass = INTEX) {
                let next = Symbol.new(null, INTEX, null);
                let i = foo.intex(s, next, i);
                let s = next.tag();
                do next.setTag(null);
            } else { if (cclass = STR) {
                let t = String.new(s.length());
                let i = Lex.string(s, t, i+1);
                let next = Symbol.new(null, STR, t);
                if (i < s.length()) { if (s.charAt(i) = 44) {
                    let i = foo.strex(s, next, i);
                    let s = next.tag();
                    do next.setTag(null);
                    let next = Symbol.new(null, STREX, next);
                }}
            } else { if (cclass = STREX) {
                let next = Symbol.new(null, STREX, null);
                let i = foo.intex(s, next, i);
                let s = next.tag();
                do next.setTag(null);
            } else { if (cclass = SYM) {
                let t = String.new(s.length());
                let i = Lex.token(s, t, i);
                let next = Symbol.new(t, SYM, null);
                if (i < s.length()) {
                    let cclass = Lex.cclass(s.charAt(i));
                    if (cclass = INTEX) {
                        let i = foo.intex(s, next, i);
                        let s = next.tag();
                        do next.setTag(null);
                        let next = Symbol.new(null, INTEX, next);
                    } else { if (cclass = STREX) {
                        let i = foo.strex(s, next, i);
                        let s = next.tag();
                        do next.setTag(null);
                        let next = Symbol.new(null, STREX, next);
                    } else { if (~(cclass = BLANK)) {
                        /* error */
                    }}}
                }
            }}}}}}

            do argv.append(next);
        }

        return i;
    }


    function int intex(String s, Symbol next, int i) {
        var char c;
        var int cclass;
        var String t;
        var Symbol buf, stack;

        if ( (next.meta()&-4) = 4 ) {
            let t = next.data();
            do t.dispose();
            let stack = next;
            let c = s.charAt(i);
            let cclass = Lex.cclass(c);
            while ( (cclass&-4) = 4 ) {
                let buf = Symbol.new(null, cclass, c);
                do buf.setNext(stack);
                let stack = buf;
                let i = i + 1;
                if (i = s.length()) {
                        do Error.send("expected integer");  //##DB##
                        do Error.set(0);
                        do LibSym.destroyList(stack);
                        return 0;
                }
                let c = s.charAt(i);
                let cclass = Lex.cclass(c);
            }
            let t = String.new(s.length());
        }

        return i;
    }

    function int strex(String s, Symbol next, int i) {
        return i;
    }

    function int block(String s, Symbol arg, int i) {
        var Symbol cmdlin;

        let cmdlin = Symbol.new(null, CMDLIN, null);
        let i = foo.foo(s, cmdlin, i+1);
        do cmdlin.setData(cmdlin.next());
        do cmdlin.setNext(null);
        while (~(i < s.length())) {
            do arg.append(cmdlin);
            let s = IOBox.read("|");
            let cmdlin = Symbol.new(s, CMDLIN, null);
            let i = foo.foo(s, cmdlin, 0);
            let s = cmdlin.tag();
            do cmdlin.setTag(null);
            do cmdlin.setData(cmdlin.next());
            do cmdlin.setNext(null);
        }

        do arg.append(cmdlin);
        do arg.setTag(s);

        return i + 1;
    }

}
