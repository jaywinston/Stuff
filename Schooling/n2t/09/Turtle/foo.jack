class foo {

    static int BLOCK, CMDLIN, INT, INTEX, STR, STREX, SYM;


    function void init() {
        let BLOCK = LibSym.BLOCK();
        let CMDLIN = LibSym.CMDLIN();
        let INT = LibSym.INT();
        let INTEX = LibSym.INTEX();
        let STR = LibSym.STR();
        let STREX = LibSym.STREX();
        let SYM = LibSym.SYM();
        return;
    }


    function int foo(String s, Symbol argv, int i) {
        var int cclass;
        var String t;
        var Symbol next;

        let i = Str.lskip(s, 32, i);
        while (i < s.length()) {

            let cclass = Lex.cclass(s.charAt(i));
            let t = String.new(s.length());
            let next = Symbol.new(s, cclass, t);

            if (cclass = STR) {
                let i = Lex.string(s, t, i+1);
                if (i < s.length()) {
                    if (s.charAt(i) = 44) {
                        let i = foo.strex(s, next, i+1);
                        let next = Symbol.new(null, STREX, next);
                    } else { if (s.charAt(i) = 32) {
                        let i = Str.lskip(s, 32, i);
                    } else {
                        do Error.send("expected comma");  // ##DB##
                        do Error.set(0);  // expected comma
                        do LibSym.destroyList(next);
                        return -1;
                    }}
                }
            } else { if (cclass = BLOCK) {
                let i = foo.block(s, next, i+1);
                do next.setData(next.next());
                do next.setNext(null);
                let s = next.tag();
                if (i < s.length()) {
                    if ( (Lex.cclass(s.charAt(i))&-4) = 4 ) {
                        let i = foo.intex(s, next, i);
                        let s = next.name();
                        do next.setName(null);
                        let next = Symbol.new(null, INTEX, next);
                    } else { if (s.charAt(i) = 44) {
                        let i = foo.strex(s, next, i+1);
                        let s = next.name();
                        do next.setName(null);
                        let next = Symbol.new(null, STREX, next);
                    } else { if (s.charAt(i) = 125) {
                        return i + 1;
                    } else { if (s.charAt(i) = 32) {
                        let i = Str.lskip(s, 32, i);
                    } else {
                        do Error.send("bad c after block");  // ##DB##
                        do Error.set(0);
                        do LibSym.destroyList(next);
                        return null;
                    }}}}
                }
            } else {
                let i = Lex.token(s, t, i);
                if (i < s.length()) {
                    if ( (Lex.cclass(s.charAt(i))&-4) = 4 ) {
                        let i = foo.intex(s, next, i);
                        if (Error.isSet()) {
                            do LibSym.destroyList(next);
                            return -1;
                        }
                        let s = next.tag();
                        let next = Symbol.new(null, INTEX, next);
                    } else { if (s.charAt(i) = 32) {
                        let i = Str.lskip(s, 32, i);
                    } else {
                        do Error.send("should be plus");  // ##DB##
                        do Error.set(0);  // should be plus
                        do LibSym.destroyList(next);
                        return -1;
                    }}
                }
            }}

            do t.dispose();
            do next.setTag(null);
            do argv.append(next);
        }

        return i;
    }


    function int intex(String s, Symbol next, int i) {
        var char c;
        var int cclass;
        var String t;
        var Symbol buf, stack;

        if ( (next.meta()&-4) = 4 ) {
            let t = next.data();
            do t.dispose();
            let stack = next;
            let c = s.charAt(i);
            let cclass = Lex.cclass(c);
            while ( (cclass&-4) = 4 ) {
                let buf = Symbol.new(null, cclass, c);
                do buf.setNext(stack);
                let stack = buf;
                let i = i + 1;
                if (i = s.length()) {
                        do Error.send("expected integer");  //##DB##
                        do Error.set(0);
                        do LibSym.destroyList(stack);
                        return 0;
                }
                let c = s.charAt(i);
                let cclass = Lex.cclass(c);
            }
            let t = String.new(s.length());
        }

        return i;
    }

    function int strex(String s, Symbol next, int i) {
        return i;
    }

    function int block(String s, Symbol next, int i) {
        var Symbol cmdlin;

do DB.db(s);
do Output.println();
do Output.printInt(i);
        let cmdlin = Symbol.new(null, CMDLIN, null);
        let i = foo.foo(s, cmdlin, i);
        do cmdlin.setData(cmdlin.next());
        do cmdlin.setNext(null);
        while (~(i < s.length())) {
            do next.append(cmdlin);
            let s = IOBox.read("|");
            let i = foo.foo(s, cmdlin, 0);
            do cmdlin.setData(cmdlin.next());
            do cmdlin.setNext(null);
        }

        do next.append(cmdlin);

        return i;
    }

}
