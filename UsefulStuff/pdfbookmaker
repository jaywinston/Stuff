#!/bin/bash

# format a pdf file for brochure-style printing

PROG=$(basename $0)

usage () {
    echo "$PROG: Usage: $PROG [options] PDF-FILE"
}

# temporary arg handler
for arg ; do
    if [[ $arg =~ ^--sheets= ]] ; then
        sheets=${arg#--sheets=}  # eval ${arg#--}, but I haven't read the docs.
        if [[ ! $sheets =~ ^[0-9]+$ ]] ; then
        {
            echo "$PROG: invalid argument to option 'sheets'"
            echo "  Arguments to 'sheets' must be a positive integer."
            exit 1
        } >&2
        fi
        shift
break  # With one option for now, let's quit while we're ahead.
    fi
done

if [ $# -ne 1 ] ; then
    usage >&2
    exit 2
fi

if [ "$(dd if=$1 bs=4 count=1 2>/dev/null)" != '%PDF' ] ; then
    {
        echo "$PROG: input file does not appear to be in PDF format"
        usage
        echo "$PROG: exiting"
    } >&2
    exit 3
fi

infile=$1
pages=$(pdfinfo -meta $infile | grep Pages: | cut -d: -f2)
pps=$(( ${sheets:-4} * 4 ))  # pages per style; 4 pages per sheet
len_seq=$pps
styles=$(( (pages-1) / pps + 1 ))
last_style=$(( pages%pps + (-(pages%4)&3) ))  # Arithmetically anyone?
fmt_w=${#styles}  # width for zero padding in the output filenames


function make_sequence {
    local sequence end
    end=${1:-$pps}
    for ((i=0; i < end/2; i++)) ; do
        case $((i%2)) in
        0) sequence+=( $((end-i)) $((1+i)) ) ;;
        1) sequence+=( $((1+i)) $((end-i)) ) ;;
        esac
    done
    echo ${sequence[@]}
}

sequence=( $(make_sequence) )

pdfseparate $infile page-%d.pdf
echo | groff -T pdf > blank.pdf

# ns: number of style
for ((ns=0; ns<styles; ns++)) ; do

    # po: page offset
    po=$(( ns * pps ))

    if ((ns+1 == styles && last_style>0)) ; then
        len_seq=$last_style
        sequence=( $(make_sequence $last_style) )
    fi

    for ((i=0; i<len_seq; i++)) ; do
        page_no=$(( po + ${sequence[i]} ))
        if ((page_no <= pages)) ; then
            style[$i]="page-${page_no}.pdf"
        else
            style[$i]=blank.pdf
        fi
    done

    pdfunite ${style[@]} style-$(printf "%0${fmt_w}d" $ns).pdf
    rm $(grep -o 'page[^ ]*' <<< ${style[@]})
    unset style

done

rm blank.pdf
