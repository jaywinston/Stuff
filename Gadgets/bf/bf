#!/usr/bin/python3

import pathlib
import sys
import termios


b = [0]  # The Buffer
p = 0    # The Pointer
s = []   # stack for loop addresses
i = 0    # src index
src = ''

r = 0  # exit status

if '-d' in sys.argv:
    DEBUG = True
    sys.argv.remove('-d')


def main():
    getsrc()
    tty_setup()
    try:
        run()
        if s:
            fail('unmatched [', 2)
    except (KeyboardInterrupt, DebugExit):
        print()
    except RuntimeError as e:
        print(e, file=sys.stderr)
    except:
        print(report(), file=sys.stderr)
        raise
    finally:
        tty_cleanup()
    exit(r)


def getsrc():
    global src
    try:
        src = ''.join(pathlib.Path(f).read_text() for f in sys.argv[1:])
        if not src:
            src = sys.stdin.read()
            sys.stdin = open('/dev/tty')
    except FileNotFoundError as e:
        src = ''.join(sys.argv[1:])


def tty_setup():
    if sys.stdin.isatty():
        global termattrs
        termattrs = termios.tcgetattr(sys.stdin.fileno())
        termios.tcsetattr(
            sys.stdin.fileno(),
            termios.TCSADRAIN,
            # raw mode reads without "Enter"
            termattrs[:3] + [termattrs[3] & ~termios.ICANON] + termattrs[4:])


def tty_cleanup():
    if sys.stdin.isatty():
        termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, termattrs)


def run():
    while i < len(src):
        do()
        advance()


def do():
    TRANSLATIONS.get(src[i], lambda: None)()


def advance():
    global i
    i += 1


class DebugExit(Exception):
    # idk why empty exception classes are so anti-dogmaed.
    # they're very expressive when used judiciously.
    pass


def debug_exit():
    raise DebugExit


def report(m=''):
    lines = src[:i].split('\n')
    line = len(lines)
    col = i + 1 if line == 1 else i - len(' '.join(lines[:-1]))  # improve this
    return f'{m}\nline {line}, column {col}'


def fail(m, e):
    global r
    r = e
    raise RuntimeError(report(m))


def info(*o, file=sys.stderr):
    print(*o, end='', file=file, flush=True)


def left():
    global p
    if p == 0:
        b.insert(0, 0)
    else:
        p -= 1


def right():
    global p
    p += 1
    if p == len(b):
        b.append(0)


def up():
    b[p] += 1


def down():
    b[p] -= 1


def decide():
    global i
    if b[p]:
        s.append(i - 1)
    else:
        e = i
        n = 1
        while n:
            i += 1
            if i == len(src):
                i = e
                fail('unmatched [', 2)
            elif src[i] == '[':
                n += 1
            elif src[i] == ']':
                n -= 1


def repeat():
    global i
    if not s:
        fail('unmatched ]', 3)
    n = s.pop()
    if b[p]:
        i = n


def get():
    #b[p] = ord(sys.stdin.read(1))  # this can fail, useful err message welcome
    try:
        b[p] = ord(sys.stdin.read(1))
    except ValueError as e:
        fail(f'while reading input: not in character set: {b[p]}', 5)


def put():
    try:
        info(chr(b[p]), file=sys.stdout)
    except ValueError as e:
        fail(f'in cell {p}: not in character set: {b[p]}', 4)


TRANSLATIONS = {
    '<': left,
    '>': right,
    '+': up,
    '-': down,
    '[': decide,
    ']': repeat,
    ',': get,
    '.': put,
}

if DEBUG:
    TRANSLATIONS.update({
        # my extensions
        '_': lambda: info(' '),
        '~': lambda: info('\n'),
        '$': lambda: info(src),
        '@': lambda: info(i),
        '?': lambda: info(
            b),
            # this color-inverts the referenced cell
            # i find it useful but annoying
            # str(b[:p])[:-1] +
            # (', ' if p>0 else '') +
            # f'\033[7m{str(b[p])}\033[0m' +
            # (', ' if p<len(b)-1 else '') +
            # str(b[p+1:])[1:]),
        '^': lambda: info(p),
        '*': lambda: info(b[p]),
        '#': lambda: info(len(src)),
        ':': lambda: info(s),
        '!': debug_exit,
    })


main()
